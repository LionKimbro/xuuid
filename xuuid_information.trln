{
   "formats": [
      {
         "fields": [
            {
               "fieldname": "Name",
               "fieldtype": "OneLineText"
            }
         ],
         "formatname": "DEFAULT",
         "outputlines": [
            "{*Name*}"
         ],
         "titleline": "{*Name*}"
      },
      {
         "fields": [
            {
               "fieldname": "Name",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Created",
               "fieldtype": "DateTime",
               "format": "%Y-%B-%-d %-I:%M:%S %p",
               "init": "Now"
            },
            {
               "fieldname": "Hook",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Notes",
               "fieldtype": "SpacedText",
               "lines": 30
            },
            {
               "fieldname": "SupportURL",
               "fieldtype": "ExternalLink"
            }
         ],
         "formatname": "Fat_Info",
         "icon": "note",
         "outputlines": [
            "{*Name*}"
         ],
         "titleline": "{*Name*} -- {*Hook*}"
      },
      {
         "fields": [
            {
               "fieldname": "Name",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Created",
               "fieldtype": "DateTime",
               "format": "%Y-%B-%-d %-I:%M:%S %p",
               "init": "Now"
            },
            {
               "fieldname": "Hook",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Question",
               "fieldtype": "SpacedText",
               "lines": 8
            },
            {
               "fieldname": "Research",
               "fieldtype": "SpacedText",
               "lines": 20
            },
            {
               "fieldname": "Answer",
               "fieldtype": "SpacedText",
               "lines": 8
            },
            {
               "fieldname": "URL",
               "fieldtype": "ExternalLink"
            },
            {
               "fieldname": "HomeURL",
               "fieldtype": "ExternalLink"
            },
            {
               "fieldname": "DocURL",
               "fieldtype": "ExternalLink"
            },
            {
               "fieldname": "WikipediaURL",
               "fieldtype": "ExternalLink"
            }
         ],
         "formatname": "Fat_Question",
         "icon": "question",
         "outputlines": [
            "{*Name*}"
         ],
         "titleline": "{*Name*} -- {*Hook*}"
      },
      {
         "fields": [
            {
               "fieldname": "Name",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Author",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Created",
               "fieldtype": "DateTime",
               "format": "%Y-%B-%-d %-I:%M:%S %p",
               "init": "Now"
            },
            {
               "fieldname": "Hook",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Description",
               "fieldtype": "SpacedText",
               "lines": 8
            },
            {
               "fieldname": "Notes",
               "fieldtype": "SpacedText",
               "lines": 30
            },
            {
               "fieldname": "URL",
               "fieldtype": "ExternalLink"
            },
            {
               "fieldname": "WikipediaURL",
               "fieldtype": "ExternalLink"
            }
         ],
         "formatname": "Inquiry_Con",
         "icon": "round_minus",
         "outputlines": [
            "{*Name*}"
         ],
         "titleline": "{*Name*} -- {*Hook*}"
      },
      {
         "fields": [
            {
               "fieldname": "Name",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Author",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Created",
               "fieldtype": "DateTime",
               "format": "%Y-%B-%-d %-I:%M:%S %p",
               "init": "Now"
            },
            {
               "fieldname": "Hook",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Description",
               "fieldtype": "SpacedText",
               "lines": 8
            },
            {
               "fieldname": "Notes",
               "fieldtype": "SpacedText",
               "lines": 30
            },
            {
               "fieldname": "URL",
               "fieldtype": "ExternalLink"
            },
            {
               "fieldname": "HomeURL",
               "fieldtype": "ExternalLink"
            },
            {
               "fieldname": "WikipediaURL",
               "fieldtype": "ExternalLink"
            }
         ],
         "formatname": "Inquiry_Definition",
         "icon": "book_3",
         "outputlines": [
            "{*Name*}"
         ],
         "titleline": "{*Name*} -- {*Hook*}"
      },
      {
         "fields": [
            {
               "fieldname": "Name",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Author",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Created",
               "fieldtype": "DateTime",
               "format": "%Y-%B-%-d %-I:%M:%S %p",
               "init": "Now"
            },
            {
               "fieldname": "Hook",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Description",
               "fieldtype": "SpacedText",
               "lines": 8
            },
            {
               "fieldname": "Notes",
               "fieldtype": "SpacedText",
               "lines": 30
            },
            {
               "fieldname": "URL",
               "fieldtype": "ExternalLink"
            },
            {
               "fieldname": "WikipediaURL",
               "fieldtype": "ExternalLink"
            }
         ],
         "formatname": "Inquiry_Pro",
         "icon": "round_plus",
         "outputlines": [
            "{*Name*}"
         ],
         "titleline": "{*Name*} -- {*Hook*}"
      },
      {
         "fields": [
            {
               "fieldname": "Name",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Created",
               "fieldtype": "DateTime",
               "format": "%Y-%B-%-d %-I:%M:%S %p",
               "init": "Now"
            },
            {
               "fieldname": "Hook",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Contact",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "EmailAddress",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "PhoneNumber",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Description",
               "fieldtype": "SpacedText",
               "lines": 8
            },
            {
               "fieldname": "Log",
               "fieldtype": "SpacedText",
               "lines": 8
            },
            {
               "fieldname": "Notes",
               "fieldtype": "SpacedText",
               "lines": 30
            },
            {
               "fieldname": "HomeURL",
               "fieldtype": "ExternalLink"
            },
            {
               "fieldname": "WikipediaURL",
               "fieldtype": "ExternalLink"
            },
            {
               "fieldname": "RepoURL",
               "fieldtype": "ExternalLink"
            }
         ],
         "formatname": "Inquiry_Project",
         "icon": "home",
         "outputlines": [
            "{*Name*}"
         ],
         "titleline": "{*Name*} -- {*Hook*}"
      },
      {
         "fields": [
            {
               "fieldname": "Author",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Created",
               "fieldtype": "DateTime",
               "format": "%Y-%B-%-d %-I:%M:%S %p",
               "init": "Now"
            },
            {
               "fieldname": "Hook",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Quotation",
               "fieldtype": "SpacedText",
               "lines": 7
            },
            {
               "fieldname": "Notes",
               "fieldtype": "SpacedText",
               "lines": 30
            },
            {
               "fieldname": "SourceURL",
               "fieldtype": "ExternalLink"
            }
         ],
         "formatname": "Inquiry_Quotation",
         "icon": "smiley_5",
         "outputlines": [
            "{*Name*}"
         ],
         "titleline": "{*Author*} -- {*Hook*}"
      },
      {
         "fields": [
            {
               "fieldname": "Name",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Hook",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "URL",
               "fieldtype": "ExternalLink"
            },
            {
               "fieldname": "Description",
               "fieldtype": "SpacedText",
               "lines": 6
            }
         ],
         "formatname": "Research_Link",
         "icon": "bookmark",
         "outputlines": [
            "{*Name*}"
         ],
         "titleline": "{*Name*} -- {*Hook*}"
      },
      {
         "fields": [
            {
               "fieldname": "Name",
               "fieldtype": "OneLineText"
            },
            {
               "fieldname": "Created",
               "fieldtype": "DateTime",
               "format": "%Y-%B-%-d %-I:%M:%S %p",
               "init": "Now"
            },
            {
               "fieldname": "Notes",
               "fieldtype": "SpacedText",
               "lines": 30
            }
         ],
         "formatname": "Todo_Flag",
         "icon": "sphere",
         "outputlines": [
            "{*Name*}"
         ],
         "titleline": "{*Name*}"
      }
   ],
   "nodes": [
      {
         "children": [
            "043b7a4105d411eca1ab60a44c24df47"
         ],
         "data": {
            "Name": "Related Works"
         },
         "format": "DEFAULT",
         "uid": "017420c705d411ecade560a44c24df47"
      },
      {
         "children": [
            "06c1ad6d05fb11ecbc5760a44c24df47",
            "52eb3fba064411ecb22960a44c24df47",
            "d6cd3af705fc11ecbe7d60a44c24df47",
            "1ae11983064311ecb41160a44c24df47"
         ],
         "data": {
            "Name": "RFCs"
         },
         "format": "DEFAULT",
         "uid": "0389bad405fb11ecb0b960a44c24df47"
      },
      {
         "children": [
            "e282385e062711ecaca760a44c24df47",
            "06a186a305d411ecb25760a44c24df47",
            "3280336605dd11ec839460a44c24df47",
            "abf5e1af064311ec857660a44c24df47"
         ],
         "data": {
            "Name": "Identification Schemes"
         },
         "format": "DEFAULT",
         "uid": "043b7a4105d411eca1ab60a44c24df47"
      },
      {
         "children": [
            "d0899ad7038711ec91d160a44c24df47",
            "49673e21038911ec9e3460a44c24df47",
            "16131bf809c511ecab0360a44c24df47",
            "bf5cc292038911ecabcf60a44c24df47",
            "400af42b038911ecabe160a44c24df47",
            "75089bf1038911ec9e0e60a44c24df47",
            "ff2cb8f3038a11ecbf7b60a44c24df47",
            "7778f1c605dc11ecb25f60a44c24df47",
            "6edd95c806e811eca74160a44c24df47"
         ],
         "data": {
            "Created": "2021-08-22 13:03:29.648638",
            "Hook": "uniqueness, ...",
            "Name": "What qualities might we looking for in a GUUID system?",
            "Question": "What qualities are we looking for in a universally unique identifier, generally (in a GUUID: general universally unique identifier)?"
         },
         "format": "Fat_Question",
         "uid": "0505f7f1038411ec99b760a44c24df47"
      },
      {
         "children": [
            "76a3b01405d411ec968c60a44c24df47",
            "abb22f0205d411ec92a960a44c24df47",
            "0a939f0c05d511ecbb2d60a44c24df47",
            "87f53b4205d411ecb15d60a44c24df47",
            "325f7c2805d511ec98c960a44c24df47"
         ],
         "data": {
            "Created": "2021-08-25 11:41:16.563127",
            "Hook": "URLs combine sourcing and identification",
            "Name": "URLs",
            "Notes": ""
         },
         "format": "Fat_Info",
         "uid": "06a186a305d411ecb25760a44c24df47"
      },
      {
         "children": [
            "5e6c15f205fd11ec9acb60a44c24df47"
         ],
         "data": {
            "Description": "\"\"\"\n   A common case for modern applications is to create a unique\n   identifier for use as a primary key in a database table.  This\n   identifier usually implements an embedded timestamp that is sortable\n   using the monotonic creation time in the most significant bits.  In\n   addition the identifier is highly collision resistant, difficult to\n   guess, and provides minimal security attack surfaces.  None of the\n   existing UUID versions, including UUIDv1, fulfill each of these\n   requirements in the most efficient possible way.  This document is a\n   proposal to update [RFC4122] with three new UUID versions that\n   address these concerns, each with different trade-offs.\n\"\"\"",
            "Hook": "time-based UUID formats",
            "Name": "draft-peabody-dispatch-new-uuid-format-01",
            "URL": "https://datatracker.ietf.org/doc/html/draft-peabody-dispatch-new-uuid-format"
         },
         "format": "Research_Link",
         "uid": "06c1ad6d05fb11ecbc5760a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion",
            "Created": "2021-08-26 22:09:59.227849",
            "Hook": "they are highly unambiguous",
            "Name": "XUUIDs are strictly typed"
         },
         "format": "Inquiry_Pro",
         "uid": "06c9b1e206f511ec89b760a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion Kimbro",
            "Created": "2021-08-25 11:48:30.526234",
            "Hook": "URLs are easy to construct such that they are meaningful",
            "Name": "meaningful"
         },
         "format": "Inquiry_Pro",
         "uid": "0a939f0c05d511ecbb2d60a44c24df47"
      },
      {
         "children": [
            "cb322bfe070411ec841060a44c24df47"
         ],
         "data": {
            "Created": "2021-08-26 23:57:33.599714",
            "Hook": "hard, soft, and local data for an identifier",
            "Name": "Identifier Data",
            "Notes": "\n{\"HARD\": (the Hard Identifier),\n \"SOFT\": {soft information},\n \"LOCAL\": {\"NAME\": \"...\"}}\n\n\"HARD\" contains the Hard Identifier.\n\n\"SOFT\" contains various soft data associated.\n\n\"LOCAL\" contains local data -- and by \"local,\" I mean local to this very file, including the other sections within this file.\nIt presently contains only one item: \"NAME\".\nThat name is the local name for this hard identifier."
         },
         "format": "Fat_Info",
         "uid": "0de4aedc070411ec9b0460a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 22:29:15.681195",
            "Hook": "3 Basic Points",
            "Name": "Basic Strategy",
            "Notes": "The basic idea of XUUIDs is as follows:\n\n1. Make absolutely enormous identifiers.\n2. Make them human readable.\n3. With tools, make them short, and human readable, for local context.\n\nOn the next page, I'll show you an example of an enormous, but human readable identifier."
         },
         "format": "Fat_Info",
         "uid": "0e6f78b403d311eca2ea60a44c24df47"
      },
      {
         "children": [
            "1121f88105db11ec8fe160a44c24df47",
            "2b7b6b3305fd11ec8de560a44c24df47"
         ],
         "data": {
            "Name": "Tidbits"
         },
         "format": "DEFAULT",
         "uid": "0f09ee9005db11eca79260a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:31:40.505767",
            "Hook": "an interesting problem with assigning serial numbers",
            "Name": "serial number problems",
            "Notes": "I like serial numbers because they are very short, automatic, and sequential.\n\nNow, when serial numbers are assigned, you have to keep them in the originating document, so that if something interrupts the sequential numbering that arose in the past, the identifiers don't change from the point of divergence.  So if you numbered things \"1\", \"2\", \"3\", you need to make sure that those numbers stay attached to the things numbered.\n\nYou ALSO need to keep track of, \"Here's the next number I'm going to assign.\"  Yes, you can infer a number from the things named, but what if the very last thing were deleted?  You wouldn't see it.  If you don't want to recycle your numbers, you have to keep track of the next number to be assigned.\n\nNow that's not hard.  And so far, so good.\n\nBut there's an interesting situation that was pointed out to me by Ciprian Craciun:  If the data is stored in a repository, and the next value is also stored in that repository, and then if you go backwards in time -- by recalling a historical version of the repository, for instance, and then develop from there -- you have now assigned a number twice.  Because the \"next number to assign\" counter was rolled backwards.\n\nSo serial numbers need to be pulled from some external agency that is dedicated to monotonically increasing serial numbers, and we presently don't have consumer infrastructure (that I'm aware of) for assigning serial numbers as a general service.  Maybe it exists, but in my nearly 40 years of programming, I've not heard of it.\n\nIn this particular story, Ciprian Cracium was advocating for random number draw.  Of course, "
         },
         "format": "Fat_Info",
         "uid": "1121f88105db11ec8fe160a44c24df47"
      },
      {
         "children": [
            "b1ef84d0043411ecb11660a44c24df47"
         ],
         "data": {
            "Name": "XUUID tooling"
         },
         "format": "DEFAULT",
         "uid": "1436a58b043411ecb6c160a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Leo Dirac",
            "Created": "2021-08-22 11:09:24.161223",
            "Hook": "calculates a collision after 10 years in a massively GUID-generating world",
            "Notes": "It does strike me as plausible that there could come a day in our technological future in which the trail behind people and machines generates roughly one GUID per second per human being on the planet.  I speculate that the bulk of this data would come from machines that automatically monitor human life.",
            "Quotation": "\"\"\"\nIf every person on the planet generates a new UUID4 every second, we\u2019d expect a collision to occur after about 10 years.\n\nUUID4 is the commonly-used variant of the UUID spec that uses randomly generated numbers to choose the UUID instead of information about the generating machine or what have you. UUID4\u2019s leave 122 of the 128 bits available for random data, which by the birthday paradox means we should expect a collision after about 2^(122/2) have been generated. That\u2019s 10^18.4 about. The earth has about 10^9.9 people in it, and a year has almost exactly 10^7.5 seconds in it.\n\n9.9+7.5 = 17.4\n\n10^(18.4\u201317.4) = 10\n\nSo about 10 years.\n\nIt\u2019s extremely unlikely there have been any collisions for properly generated UUID\u2019s so far. (But buggy code has certainly generated collisions.) However, as we look to the not-so-distant future where everybody is generating data all the time, it\u2019s clear we\u2019re going to need more than 128 bits for our UUID space.\n\"\"\"",
            "SourceURL": "https://www.quora.com/Has-there-ever-been-a-UUID-collision/answer/Leo-Dirac"
         },
         "format": "Inquiry_Quotation",
         "uid": "14cb7bcc037411ecb1e760a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-30 12:04:22.520114",
            "Hook": "identifer where a machine can tell something of what it is, from the identifier",
            "Name": "Machine Descriptive",
            "Notes": "This is a harder problem, because it means that you need some type information in the identifier, and the type itself is an identifier.  Thus you need nestable identifiers.\n\n(This separates RFC-4151 tags from XUUID tags.)"
         },
         "format": "Fat_Info",
         "uid": "16131bf809c511ecab0360a44c24df47"
      },
      {
         "children": [
            "1f573cc4037111ec86bf60a44c24df47",
            "017420c705d411ecade560a44c24df47",
            "3ceea74105fa11ecb25960a44c24df47",
            "0389bad405fb11ecb0b960a44c24df47",
            "0f09ee9005db11eca79260a44c24df47"
         ],
         "data": {
            "Name": "Library"
         },
         "format": "DEFAULT",
         "uid": "179c5300037111ecb09560a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 22:15:15.928113",
            "Hook": "identifiers are easily KiB long",
            "Name": "It's Very Long",
            "Notes": "Consider *just* the hard data for this identifier:\n\n  {\"TYPE\": [XUUID:] \"TYPE.PERSON\",\n   \"NAME\": \"Lion Kimbro\",\n   \"DOB\": \"1977-08-29\",\n   \"BIRTHPLACE\": \"Monterey, CA\",\n   \"RANDOM\": \"f0838b3c-dc7c-440d-b941-4b1d07d7eda4\"}\n\nThat's on the order of 150, 160 characters long.\n\nIncluding soft data like public keys, AKAs, sourcing URLs, recommended naming, and perhaps local data as well, this could easily stretch to 1KiB."
         },
         "format": "Fat_Info",
         "uid": "19e751f203d111ecbd9160a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-26 21:13:19.050011",
            "Description": "The way it has been presented, with short identifying information attached, there's a lot of responsibility on preserving naming coherence on the part of the authority.\n\nUsing the example:  \"tag:sandro@hawke.org,2001-06-05:Taiko\" -- it seems that the responsibility of preserving naming coherence rests heavily on the authority.",
            "Hook": "as presented, tags seem to be manually assigned (note: this is about practice, not technology)",
            "Name": "manually managed?",
            "Notes": "This is easily remedied.\n\nInstead of identifiers like:\n\n  \"tag:lionkimbro@gmail.com,2021:url-0000\"  (the first link number, assigned by a link database,)\n\n...create tags like:\n\n  \"tag:lionkimbro@gmail.com,2021-08-26:urlrecord:home-collection:url-0000\"\n\nThe software needs to prompt the user for:\n* the user's email address\n* a unique name for the url collection (in this example, \"home-collection\")\n\nThe software needs to take note of:\n* the date at which the collection was created (in this example, \"2021-08-26\")\n\nNote that collisions are still possible if the software loses track of which URL serial number it will assign next.\n\n\nFor comparison, an equivalent-ish XUUID identifier would look like this:\n\n  {\"TYPE\": [XUUID:] \"SAVEDURL\",\n   \"VERSION\": 1,\n   \"CREATED\": \"2021-08-26T21:06:36\",\n   \"COLLECTION\": [XUUID:] \"HOMECOLLECTION\",\n   \"SERIALNUM\": 0,\n   \"AUTHOR\": [XUUID:] \"LION\"}\n\n\nThe \"negative\" of \"manually managed\" isn't really fixed -- it's just important, I think, that when programs assign tags, that appropriate effort is taken to make sure that they really will not collide with other programs' methods of assignment.",
            "URL": "http://www.taguri.org/",
            "WikipediaURL": "https://en.wikipedia.org/wiki/Tag_URI_scheme"
         },
         "format": "Inquiry_Con",
         "uid": "1a8a18ca06ed11ec8a4560a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Description": "\"\"\"\nTag URIs (also known as \"tags\") are designed to be unique\nacross space and time while being tractable to humans.  They are\ndistinct from most other URIs in that they have no authoritative\nresolution mechanism.  A tag may be used purely as an entity\nidentifier.  Furthermore, using tags has some advantages over the\ncommon practice of using \"http\" URIs as identifiers for\nnon-HTTP-accessible resources.\n\"\"\"\n\n\"\"\"\n   1.  Identifiers are likely to be unique across space and time, and\n       come from a practically inexhaustible supply.\n\n   2.  Identifiers are relatively convenient for humans to mint\n       (create), read, type, remember etc.\n\n   3.  No central registration is necessary, at least for holders of\n       domain names or email addresses; and there is negligible cost to\n       mint each new identifier.\n\n   4.  The identifiers are independent of any particular resolution\n       scheme.\n\"\"\"",
            "Hook": "<b>The 'tag' URI Scheme (XUUID is closest to this)</b>",
            "Name": "RFC-4151",
            "URL": "https://datatracker.ietf.org/doc/html/rfc4151"
         },
         "format": "Research_Link",
         "uid": "1ae11983064311ecb41160a44c24df47"
      },
      {
         "children": [
            "2f5759d603ca11ec983c60a44c24df47",
            "7182e90903ca11ecae2060a44c24df47",
            "bcfb4bfe03cd11ecb2f660a44c24df47",
            "d366d7f803cd11ec959e60a44c24df47",
            "d692578403d511ec968460a44c24df47",
            "e5ee325703d511ec905060a44c24df47"
         ],
         "data": {
            "Created": "2021-08-22 21:25:13.905630",
            "Hook": "auxiliary data that supports an XUUID",
            "Name": "Soft Data",
            "Notes": ""
         },
         "format": "Fat_Info",
         "uid": "1c8f0ab203ca11eca1cc60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-23 13:31:37.974706",
            "Name": "How MIME multi-part works",
            "Notes": "Multi-part version and type information:\n  MIME-Version: 1.0\n\nEach section has a type and a boundary specification.\nThey can also have a content type encoding spec.\n  Content-Type: application/octet-stream\n  Content-Transfer-Encoding: base64",
            "SupportURL": "https://en.wikipedia.org/wiki/MIME#Multipart_messages"
         },
         "format": "Fat_Info",
         "uid": "1dc1d4fb045111ec81e360a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 13:32:49.146720",
            "Name": "What domains need what kind of guarantee?",
            "Question": "What domains need what kind of guarantee?"
         },
         "format": "Fat_Question",
         "uid": "1dc411c4038811ecbcf960a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion",
            "Created": "2021-08-26 22:10:39.123255",
            "Hook": "key/value pairs, types that can specify encoding information, nestable structures",
            "Name": "XUUIDs are logically interpretable",
            "Notes": "If a tag URI says \"person\" and another tag URI says \"person\", how compatible are the tags?\nThey could be strictly compatible, or they could be completely incompatible.\n\nCompatible:\n\n  tag:lionkimbro@gmail.com,2001:person:LionKimbro:1977-08-29\n  tag:lionkimbro@gmail.com,2001:person:SomeoneElsesName:1978-02-25\n\nIncompatible:\n\n  tag:lionkimbro@gmail.com,2001:person:LionKimbro:1977-08-29\n  tag:foo@example.com,2004:person:Kimbro:Lion:blond:blue:1977-08-29\n\nThat is, the encoding information is hard to figure from the simple designator, \"person\".\n\nWhereas in my thought about how XUUID would work, you'd have a specific \"TYPE\" field, and the value for that type would be another identifier, and that identifier would have a specific name and a specific version and a specific authority and a specific time of creation and so it couldn't be confused with another system, and there would be associated information about what things meant and how they are associated.\n\nA system looking at the two identifiers would say, \"This one follows one system, the other follows another, and they are not automatically compatible, even though they both say that they describe People.\""
         },
         "format": "Inquiry_Pro",
         "uid": "1e91402806f511ecb07d60a44c24df47"
      },
      {
         "children": [
            "8d8efb24037211ecaa6560a44c24df47",
            "ca186f1803d411ecb60960a44c24df47",
            "85c06b89037211eca4fe60a44c24df47"
         ],
         "data": {
            "Name": "Terminology"
         },
         "format": "DEFAULT",
         "uid": "1f573cc4037111ec86bf60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 22:29:46.857867",
            "Hook": "using an identifier for myself as an example",
            "Name": "An Example XUUID",
            "Notes": "Here's an example of an XUUID, that I can imagine:\n\n  {\"TYPE\": [XUUID:] \"TYPE.PERSON\",\n   \"NAME\": \"Lion Kimbro\",\n   \"DOB\": \"1977-08-29\",\n   \"BIRTHPLACE\": \"Monterey, CA\",\n   \"RANDOM\": \"f0838b3c-dc7c-440d-b941-4b1d07d7eda4\"}\n\nThis identifier is roughly 150-160 bytes long -- much longer than the 16 bytes of a UUID.\nYou can see that, while there is random information (and here, an entire v4 UUID) inside the XUUID, the likelihood of a collision is pretty much zero.\n\nYou can also see that the XUUID is human readable and descriptive.  You can tell that this is a person, you can tell that that person is me, you can see my date of birth here, and you can see my birthplace as well.\n\nNow this \"human readability\" of personal information brings up the subject of privacy, which we'll talk about next."
         },
         "format": "Fat_Info",
         "uid": "2104a77103d311ec8b0b60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion",
            "Created": "2021-08-26 22:17:54.423908",
            "Hook": "more information is prompted for",
            "Name": "XUUIDs are far less likely to collide",
            "Notes": "This is a stylistic issue, though.  As described above (in \"manually managed?\"), tags can be made really long, and include all the information suggested for XUUIDs, and thus made non-colliding as well."
         },
         "format": "Inquiry_Pro",
         "uid": "2206dbf106f611ec9f6760a44c24df47"
      },
      {
         "children": [
            "dfe6c3dd044511ec8e1360a44c24df47",
            "f5fbd857044511ecb5f560a44c24df47",
            "d34ca269044511ec8d4860a44c24df47"
         ],
         "data": {
            "Name": "XUUID communications &amp; storage specifications"
         },
         "format": "DEFAULT",
         "uid": "226b0abd043411ec9cc660a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 13:33:04.978960",
            "Name": "What historical collisions have there been?",
            "Question": "What historical collisions have there been?"
         },
         "format": "Fat_Question",
         "uid": "2733b997038811eca52a60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion Kimbro",
            "Created": "2021-08-22 22:44:22.673924",
            "Description": "If you have the \"hard data\" for an identifier, you have everything you absolutely need to be able to recognize and use the identifier.",
            "Hook": "data the completely identifies an XUUID",
            "Name": "hard data",
            "Notes": "Hard data is contrasted with \"soft data\" and \"local data\", which provide auxiliar information about the identifier."
         },
         "format": "Inquiry_Definition",
         "uid": "2b0b942903d511ecb6c560a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Description": "Supply an alphabet, and a generation speed, and see how long before there's a 1% probability of a collision.",
            "Hook": "how long before there's a collision?",
            "Name": "Nano ID Collision Calculator",
            "URL": "https://alex7kom.github.io/nano-nanoid-cc/?alphabet=0123456789ABCDEFGHJKMNPQRSTVWXYZ&size=16&speed=10000000&speedUnit=second"
         },
         "format": "Research_Link",
         "uid": "2b7b6b3305fd11ec8de560a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 13:33:14.000000",
            "Name": "Is \"good enough\" ok?",
            "Question": "If software is \"generally good enough,\" but under unusual circumstances produces collisions, does that warrant revisiting the system as a whole?"
         },
         "format": "Fat_Question",
         "uid": "2d0d851b038811eca15a60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 21:25:45.417365",
            "Hook": "how you know that this data is authentic",
            "Name": "Authentication",
            "Notes": "ex: supplying a signature for data (hard or soft or attached) associated with the identifier, to guarantee authenticity"
         },
         "format": "Fat_Info",
         "uid": "2f5759d603ca11ec983c60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 11:49:37.293418",
            "Description": "What I mean is something like:\nIf you were using Microsoft Word, or something, -- how could the document be identified within your domain name?\nYou'd have to host the file somewhere within your published-to-the-Internet directory tree.\nIf you move the file to a different directory, the identifier changes, without some management.\nIf you want to identify sub-components of the file, how will that work?\nThat is, the owner of the domain name needs to think consciously about how the tree beneath the domain name is managed and mapped to all of the resources beneath it, and exert effort to track changes and maintain tree integrity.  This quickly gets daunting.\n\nTo contrast, if the document has its own identifier through something like XUUID, then it can be moved freely, but it's identifier remains the same, requiring no management.  The document is assigned a type, a name, a version, perhaps an author, a time of creation, and some random information.  From that point on, it is identifiable.\n\nNow it is true that this document has to be sourced somehow -- which means placing a file into a web server's file tree, or publishing the file to an XUUID-aware, XUUID-searchable repository, or something like that.  But however the user searches for, loads, and receives the file, it is identifiable in principle by its XUUID, which remains invariant.",
            "Hook": "the maintainer of the domain's space must call the shots on naming",
            "Name": "deliberate"
         },
         "format": "Inquiry_Con",
         "uid": "325f7c2805d511ec98c960a44c24df47"
      },
      {
         "children": [
            "39a874f205dd11ec8f9a60a44c24df47",
            "47b22e8a05dd11ecb38a60a44c24df47",
            "568f141c05dd11ec9b7060a44c24df47",
            "8e015cd405dd11ecb2e860a44c24df47",
            "a069383205dd11ec81c860a44c24df47",
            "ab98ec4605dd11ec8dff60a44c24df47",
            "fef0399005dd11ec985060a44c24df47"
         ],
         "data": {
            "Created": "2021-08-25 12:46:53.481661",
            "Name": "UUIDs"
         },
         "format": "Fat_Info",
         "uid": "3280336605dd11ec839460a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Kalid Azad (The Quick Guide to GUIDs)",
            "Created": "2021-08-22 11:03:07.220347",
            "Hook": "\"collisions are still possible\"",
            "Quotation": "\"\"\"\nGUIDs are not a GUARantee\nThere\u2019s one giant caveat for GUIDs: collisions are still possible.\n\nFirst, the birthday paradox shows us the chance of a collision as GUIDs are used. It\u2019s very, very unlikely that GUIDs will collide, but as more are assigned, there are fewer left to choose from.\n\"\"\"",
            "SourceURL": "https://betterexplained.com/articles/the-quick-guide-to-guids/"
         },
         "format": "Inquiry_Quotation",
         "uid": "341eded5037311ecbb8f60a44c24df47"
      },
      {
         "children": [
            "39ea10a403d411eca01060a44c24df47"
         ],
         "data": {
            "Created": "2021-08-22 22:30:19.569731",
            "Hook": "XUUIDs are potentially dangerous, and this must be understood",
            "Name": "An Aside About Privacy",
            "Notes": "This brings up the important topic of privacy:  There are notes about privacy and unwitting exposure in \"Concerns with XUUID,\" which should be read and understood and thought about.\n\n  {\"TYPE\": [XUUID:] \"TYPE.PERSON\",\n   \"NAME\": \"Lion Kimbro\",\n   \"DOB\": \"1977-08-29\",\n   \"BIRTHPLACE\": \"Monterey, CA\",\n   \"RANDOM\": \"f0838b3c-dc7c-440d-b941-4b1d07d7eda4\"}\n\nLike I said before -- you can see my name, date of birth, and birthplace here.  I'm okay with that information being exposed, but there are a lot of people for whom that exposure could be very dangerous, and everybody needs to know what is being exposed, so that they can decide whether to expose it or not.\n\nNote however that while this data is convenient for explaining how this system could work, it's not necessary for the system that this specific information is shared.\n\nFor example, this could also be used to identify a person:\n\n  {\"TYPE\": [XUUID:] \"TYPE.PERSON\",\n   \"USERNAME\": \"ultraman\",\n   \"HOST\": \"The Armory\",\n   \"LOCATION\": [XUUID:] \"GEEKHOUSE.THEARMORY\",\n   \"RANDOM\": \"ca5f43b0-65ac-444d-b84d-adb809278649\"}\n\nOr even just this:\n\n  {\"TYPE\": [XUUID:] \"TYPE.PERSON\",\n   \"RANDOM\": \"55cdc801-8b40-467f-a7ac-0aede3c2f83e\"}\n\nThis identifier essentially just says, \"There is a person, and we're calling that person 55cdc801-8b40-467f-a7ac-0aede3c2f83e, ...\"\n\nThere are other privacy concerns to think about -- spend time reading the concerns \"Privacy Leaks\", \"Unwitting Exposure\", and \"Automated Inference\" within the \"Concerns with XUUID\" section.\n\nOK -- the following section is about what those \"XUUID\" tags mean, and about tooling support for short names."
         },
         "format": "Fat_Info",
         "uid": "348416a103d311ec8ef860a44c24df47"
      },
      {
         "children": [
            "341eded5037311ecbb8f60a44c24df47",
            "14cb7bcc037411ecb1e760a44c24df47",
            "cdce040f037611ec88b960a44c24df47"
         ],
         "data": {
            "Created": "2021-08-22 13:04:50.016746",
            "Hook": "Are GUIDs Unique?",
            "Name": "GUID Uniqueness",
            "Question": "Are GUIDs Unique?",
            "Research": "When I do now a quick search on Google for, \"are guids unique\", I find several articles questioning the uniqueness of GUID collision.\n\nArguments that collisions are likely:\n* there are several anecdotes on the Internet of collisions happening; it is counter-argued that software assigning GUIDs is not following proper randomization procedure, but I think it is still notable and worthy of reflection as a problem\n* Things in computers and records seem to pile up.  All 4 billion IPv4 addresses have been assigned, because (A) the population of the world is over 4 billion, and (B) people keep numerous personal computing devices, not even including business computing devices.  I don't know when they expected IPv4 to run out, but it did, and fairly quickly.  It does plausible to me that 1 GUID would be used per person per second, and within just a few decades.\n\nArguments that collisions are unlikely:\n* collisions require actual colliding -- if two GUIDs happen by chance to be the same, but are used in completely different domains, it is unlikely that they will ever encoutner one another in practice.  For example, the GUID may simultaneously refer to a moment in time in the middle of a video, and also identify a printer driver.  You're never going to practically try and jump to the printer driver while navigating a video, and you're never going to try to install a moment in time in a video as a printing device.\n\n"
         },
         "format": "Fat_Question",
         "uid": "34ed2b2a038411ec80f460a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-24 12:26:44.494026",
            "Hook": "local-only data associated with the identifier",
            "Name": "Local Data",
            "Notes": "Local-only data refers to data about the XUUID identifier, but that is limited in scope to the present machine.  It is information that is NOT intended for use beyond the present machine.\n\nAn example might be the locally assigned information about an identifier.\n\nIf an identifier comes in and recommends naming of \"A\", and there is already a local \"A\", then the local name of \"A2\" might be assigned to the XUUID.  That value of \"A2\" is really intended for a local fit, and isn't intended for remote contexts.\n\nThere may be other notes about the identifier that are only intended for local storage.  They can all be considered \"local data\" storage for the idetnifier.\n\nLocal-only data, as a general rule, should NOT be shipped with a data export.\n\nThe only exception I can think of is an imprint of data being exported, that is using some local names itself.  The naming assignments for the data export will likely be equivalent to the naming used locally on the computer, since it's guaranteed to have a unique local name for everything exported.\n\nHowever, those local names will likely be replaced on a receiving machine (as they are designed to be replaced,) and so there's no real problem here."
         },
         "format": "Fat_Info",
         "uid": "377993ea051111eca8e860a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion Kimbro",
            "Created": "2021-08-22 13:19:13.553803",
            "Description": "This is the name of an identifier I have invented for this project.  \"X\" can be interpreted as \"Experimental,\" \"Extensive,\" or \"Extended.\"",
            "Hook": "Extended Universally Unique Identifier",
            "Name": "XUUID",
            "Notes": "An example of an XUUID looks like:\n\n  {\"Type\": {... Person Type Identifier ...},\n   \"Birthname\": \"David Rushton Brock Kimbro\",\n   \"Birthdate\": \"1977-08-29\",\n   \"Birthplace\": {... Identifier for Monterey, California ...},\n   \"RANDOM\": \"94PXNMQ231DN8PE\"}\n\nNote that it could also look like:\n\n  {\"Type\": {... Person Type Identifier ...},\n   \"Alias\": \"The Mac\",\n   \"Whereabouts\": \"Seattle, WA\",\n   \"RANDOM\": \"FX9D5KGTM6EEDWV\"}\n\nIt's called \"Extended\" or \"Extensive,\" because it is not only random -- it includes descriptive information as well."
         },
         "format": "Inquiry_Definition",
         "uid": "37a27774038611ec839f60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion Kimbro",
            "Created": "2021-08-22 22:44:46.761808",
            "Description": "Soft data provides auxiliary information about an identifier: authentication keys associated with it, sourcing information (where to locate additional information about the identifer,) \"AKA\"s (other identifiers that are asserted to be equivalent to the hard identifier,) recommended naming hints, and additional information about the thing identified by the hard data.",
            "Hook": "auxiliary data that supports an XUUID",
            "Name": "soft data"
         },
         "format": "Inquiry_Definition",
         "uid": "3967192103d511ecbb0160a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:47:05.489534",
            "Hook": "you just need a good random number generation system",
            "Name": "Easily Assigned"
         },
         "format": "Inquiry_Pro",
         "uid": "39a874f205dd11ec8f9a60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 21:36:42.075957",
            "Name": "CHECK: currency of Concerns with XUUID section",
            "Notes": "Near the end of \"An Aside About Privacy,\" there's reference to the Concerns with XUUID sections on privacy.  Check that these are still current, in the future."
         },
         "format": "Todo_Flag",
         "uid": "39ea10a403d411eca01060a44c24df47"
      },
      {
         "children": [
            "3e4ceb8205d811ec8d4860a44c24df47",
            "da06dde105d911ecb29060a44c24df47",
            "e081f0cd09ec11ec854960a44c24df47"
         ],
         "data": {
            "Name": "Open Questions"
         },
         "format": "DEFAULT",
         "uid": "39edb16e05d811ecae8c60a44c24df47"
      },
      {
         "children": [
            "d9b3599505fa11ec87d460a44c24df47"
         ],
         "data": {
            "Name": "Related Communities"
         },
         "format": "DEFAULT",
         "uid": "3ceea74105fa11ecb25960a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion Kimbro",
            "Created": "2021-08-24 12:34:03.945940",
            "Description": "",
            "Hook": "data that comes with the identifiers, but that isn't about the identifiers",
            "Name": "bundled data"
         },
         "format": "Inquiry_Definition",
         "uid": "3d689e4c051211ecb5fb60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:11:27.971519",
            "Hook": "how do you retrieve the most recent version of a file?",
            "Name": "\"the file\" and \"file versions\"",
            "Question": "There's nothing necessarily linking a file to versions of the file.  How do you get a file's versions and its most recent version?",
            "Research": "My thinking is presently this:\n\nPossibility A:\n* There's no reason a file cannot be identified by two identifiers -- the first a claim to be a specific document, and then the second a claim to be a specific version of the same specific document.\n\nPossibility B:\n* \"Version\" is soft-data?  It's shipped with the identifier?  This seems like a bad idea to me, and that such an annotation should be considered \"bundled\" data rather than soft data.  The reason being that the soft data is supposed to be soft data associated with the identifier itself.  But what is being described is a variation specifically, and a variation property of the identified file specifically, and nothing fundamentally invariant about the identifier itself.  For example, imagine an identifier, \"War and Peace.\"  It's a book.  OK, if we take that same identifier and say, \"War and Peace means version 3,\" we have a problem.  Because we are not meaning to say that the singular identifier \"War and Peace\" refers to version 3; We instead needed to say, \"This book is version 3 of War and Peace.\"  But what we've said with the soft data is \"The identifier 'War and Peace' means, version 3 of War and Peace.\"  That's not right.  Instead, it would be better to say, \"this book is War and Peace,\" and then to also say, \"this book is version 3 of War and Peace.\"\n\nAnother possibility is to say,\n  \"This book is THE MOST RECENT VERSION of War and Peace.\"\nThat is, create an identifier that includes the concept of, \"the most recent.\"  Perhaps the identifier would be, \"VERSION\": \"FRESHEST\".  That identifier would be dynamically applied, and only applied to the most recent version of War and Peace.\n\nThis would be an example of bundled data, which would, through some kind of language convention, say that: \"There are multiple versions of War and Peace, and the most recent version that you know about would be called VERSION: FRESHEST.\"\n\nHere we come to an interesting problem, because there is no programmatic way of constructing that identifier the same way each time -- because the identifier includes a random component.  So it has to be delivered in full, from the point of inception, it seems.\n\nSo this (potential) problem seems to me an area for further research.\n"
         },
         "format": "Fat_Question",
         "uid": "3e4ceb8205d811ec8d4860a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 13:40:56.150532",
            "Hook": "tools exist that support use of the identifiers",
            "Name": "Supported",
            "Notes": ""
         },
         "format": "Fat_Info",
         "uid": "400af42b038911ecabe160a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion Kimbro",
            "Created": "2021-08-22 22:45:01.505440",
            "Hook": "local-use data associated with the XUUID identifiers",
            "Name": "local data"
         },
         "format": "Inquiry_Definition",
         "uid": "4230cc4503d511ecb57960a44c24df47"
      },
      {
         "children": [
            "5245e769039811ec861260a44c24df47",
            "62ae2bfc039811ec981160a44c24df47",
            "9941aa4e03cf11ecaaa460a44c24df47",
            "39edb16e05d811ecae8c60a44c24df47"
         ],
         "data": {
            "Name": "XUUID ideas"
         },
         "format": "DEFAULT",
         "uid": "466ffeab039811ec99ec60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:47:29.041370",
            "Hook": "when produced correctly, and in the main",
            "Name": "Unique"
         },
         "format": "Inquiry_Pro",
         "uid": "47b22e8a05dd11ecb38a60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 13:41:11.854851",
            "Hook": "identifiers where you can tell something of what it is, from the identifier",
            "Name": "Humanly Descriptive",
            "Notes": "For example, an identifier like \"Fred\" suggests to us, \"This is the name of a person,\" whereas a name like \"SN39584\" suggests to us \"This is a serial number,\" perhaps of a part or product number.\n\nMy name (my identifier) is \"Lion Kimbro\", and even if people don't know me or that there is somebody named \"Lion,\" they can probably guess that this is likely the name of a male person.\n\nIn contrast, a GUID only tells us that it is an identifier manufactured by a computer, and otherwise, we have to guess what is described."
         },
         "format": "Fat_Info",
         "uid": "49673e21038911ec9e3460a44c24df47"
      },
      {
         "children": [
            "2b0b942903d511ecb6c560a44c24df47",
            "4230cc4503d511ecb57960a44c24df47",
            "3967192103d511ecbb0160a44c24df47",
            "3d689e4c051211ecb5fb60a44c24df47"
         ],
         "data": {
            "Name": "types of data"
         },
         "format": "DEFAULT",
         "uid": "4e53716c03d511eca3f360a44c24df47"
      },
      {
         "children": [
            "0e6f78b403d311eca2ea60a44c24df47",
            "2104a77103d311ec8b0b60a44c24df47",
            "348416a103d311ec8ef860a44c24df47",
            "66a1ff2403d411eca6ed60a44c24df47"
         ],
         "data": {
            "Created": "2021-08-22 15:29:00.346812",
            "Hook": "basic ideas",
            "Name": "Introducing XUUIDs (Extended Universally Unique Identifiers)",
            "Notes": ""
         },
         "format": "Fat_Info",
         "uid": "5245e769039811ec861260a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Hook": "Uniform Resource Identifier (URI): Generic Syntax",
            "Name": "RFC-3986",
            "URL": "https://datatracker.ietf.org/doc/html/rfc3986"
         },
         "format": "Research_Link",
         "uid": "52eb3fba064411ecb22960a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-26 22:19:20.111086",
            "Hook": "at least, as presented",
            "Name": "Tag URIs are shorter"
         },
         "format": "Inquiry_Con",
         "uid": "5519af4f06f611ecabc360a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:47:53.977142",
            "Hook": "UUID concepts are integrated in most industrial databases",
            "Name": "well supported"
         },
         "format": "Inquiry_Pro",
         "uid": "568f141c05dd11ec9b7060a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-26 22:19:31.654971",
            "Hook": "as long as they are kept short and simple, that is",
            "Name": "Tag URIs are easier to remember"
         },
         "format": "Inquiry_Con",
         "uid": "5bfb244f06f611ec9afe60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Description": "\"\"\"\nUUID6: a timestamp with a weird epoch and 100 ns precision like in UUID1, but in a big-endian order that sorts naturally by time, plus some random bits instead of a predictable MAC address.\n\nUUID7: like UUID6, but uses normal Unix timestamps and allows more timestamp precision.\n\nUUID8: like UUID7, but relaxes requirements on where the timestamp is coming from. Want to use a custom epoch or NTP timestamps or something? UUID8 allows it for the sake of flexibility and future-proofing, but the downside is that there's no standard way to parse the time from one of these -- the time source could be anything monotonic.\n\"\"\" -- pjscott",
            "Hook": "\"A somewhat oversimplified summary of the new UUID formats:\"",
            "Name": "(conversation about)",
            "URL": "https://news.ycombinator.com/item?id=28090022"
         },
         "format": "Research_Link",
         "uid": "5e6c15f205fd11ec9acb60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-23 10:05:59.502918",
            "Hook": "including XUUID data annotations in NLSD files",
            "Name": "XUUIDs in NLSD",
            "Notes": "In NLSD documents, XUUIDS are embedded with source data, and identifiers are called out for patching."
         },
         "format": "Fat_Info",
         "uid": "5f274c52043411ec80a360a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Answer": "Here's the convention to follow:\n\n{...}  -- that's a nested identifier\n[\"...\"]  -- that's a short name, referring to a nested identifier\n\"...\"  -- that's an actual string value",
            "Created": "2021-08-23 10:13:03.858536",
            "Hook": "use [\"...\"] to refer to a short name",
            "Name": "How will JSON data distinguish between a value and a short name for an identifier?",
            "Question": "That is, JSON has to distinguish between:\n* a nested identifier\n* a short name referring to a nested identifier\n* an actual string value",
            "Research": "Nested values are easy to distinguish -- because they are not strings.  (They are dictionaries.)\n\nThat leaves actual string values, and short name string values that are references to identifiers (to be nested) that have a local name."
         },
         "format": "Fat_Question",
         "uid": "6063fa12043511ec840860a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-30 17:28:38.251450",
            "Hook": "is it really a problem?",
            "Name": "Is Identification Enough?",
            "Notes": "If the goal is simply to have a unique identifier, then you have no problem.\n\n\"Yes,\" it's a problem, if you have to make up schemes for generating large quantities of unique identifier's in a person's space.\n- it's all going to be sharded on the person's authority,\n- it's all going to be shareded on a timestamp,\n- ...so a collision seems less likely\n  (scenario I'm imagining: numbering entries in files automatically, sub-multiple assigned sub-second, and this is happening on multiple computers)\n\nHowever, while it's not perfect, it's very very good in the main, and useable in the short term.\n\nFurthermore, whatever goes on in the short term, it will be possible to uplift into the longer term.\n\nSo I think that Tag URIs, for the time being, are the best answer.\n\n\nSo for example:\n\n2021-08-30,lionkimbro@gmail.com:lsffile:programmingresearch  -- the file\n2021-08-30,lionkimbro@gmail.com:lsfentry:programmingresearch  -- the first (anonymous) entry in the file\n2021-08-30,lionkimbro@gmail.com:lsfentry:programmingresearch:013  -- entry #013\n2021-08-30,lionkimbro@gmail.com:lsfentry:programmingresearch:01G  -- entry #01G\n\nYou just have to be aware here that it is possible to collide here.\n* Two files both called \"programmingresearch\",\n* with entries number-assigned on the same day.\n\nThe weak point here is the name of the LSF file.\nOne solution is to always use the yyyy-mm-dd of the file itself.\nThat solves the problem for all cases save using the same name twice on the same day, which -- stupid you.\nYou can also solve that by using to-the-second timestamps.\n"
         },
         "format": "Fat_Info",
         "uid": "62981d4609f211ec912560a44c24df47"
      },
      {
         "children": [
            "6b0087f0039811ec8e3e60a44c24df47",
            "1c8f0ab203ca11eca1cc60a44c24df47",
            "377993ea051111eca8e860a44c24df47",
            "ae81e4f703ca11ecaad860a44c24df47"
         ],
         "data": {
            "Created": "2021-08-22 15:29:16.713676",
            "Hook": "elements of an XUUID",
            "Name": "XUUID"
         },
         "format": "Fat_Info",
         "uid": "62ae2bfc039811ec981160a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-24 12:13:39.132130",
            "Hook": "the time that the identifier was created",
            "Name": "Time of Creation",
            "Notes": "Dates can be expressed with any degree of precision.\n\n  \"2021\"     in 2021\n  \"2021-08\"  in August of 2021\n  \"2021-08-26\"  some time during August 26th, 2021\n  \"2021-08-26T...\"  (a more specific narrowing of time)\n\nThsi time represents the time at which the identifier was created.\n\nTimes should always be expressed UTC."
         },
         "format": "Fat_Info",
         "uid": "635cdcd6050f11ec918660a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 21:34:25.838232",
            "Hook": "descriptive and (most likely) unchanging information about the thing identified",
            "Name": "Identifying Information",
            "Notes": "This is any information about the thing identified that is unlikely to change.\n\nIt should be expressed in numbers and in human readable language, in language chosen at the author's discression.\n\nIt is not essential that the identifying information be absolutely unchangable -- since I intend for there to be tools for both relabelling data sets, and methods for identifying identifiers that are to be understood to be equivalent.\n\nFor example, consider a person's name:  A person's name is relatively constant, but people do change their names in life for myriad reasons.  I don't think we should shy away from using a person's name as an identifier, just because it might change one day.  (A good reason not to use a person's name would be for privacy reasons, but that is not the distinction I am focusing on immediately -- right now I am talking about the likelihood of an identifying factor changing.)\n\nThe key thing is to find descriptive information that is relatively stable."
         },
         "format": "Fat_Info",
         "uid": "65891ef303cb11ec894160a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 22:38:53.148547",
            "Hook": "XUUID tooling so that you're using short identifiers",
            "Name": "Short Names",
            "Notes": "\nLet's look back at an identifier for myself:\n\n  {\"TYPE\": [XUUID:] \"TYPE.PERSON\",\n   \"NAME\": \"Lion Kimbro\",\n   \"DOB\": \"1977-08-29\",\n   \"BIRTHPLACE\": \"Monterey, CA\",\n   \"RANDOM\": \"f0838b3c-dc7c-440d-b941-4b1d07d7eda4\"}\n\nWhat's that \"XUUID:\" there?  It's a piece (in a made-up language) that says \"The following thing is an XUUID.\"\n\nThe idea is that the interpreter looks at \"TYPE.PERSON\" and thinks, \"That's not a string value, -- that's a reference to another XUUID.\"\n\n\"TYPE.PERSON\" is a shortname.\n\nNow, you may notice these \"XUUID:\" type indicators.  That means that the data here is not a value, but rather, a short-name.  The short-name is resolved via tooling: the XUUID concept here is not just about the shape of identifiers, but is also about support tooling, and specifically tooling \n\nNow, these are very, very large identifiers.\n\nTwo additional things to note here:\n\n* Make them human readable -- such that people can read them, and have an idea about what they identify.\n* Make tools and conventions for use in local contexts -- and make the identifiers short, suggestive, and memorable."
         },
         "format": "Fat_Info",
         "uid": "66a1ff2403d411eca6ed60a44c24df47"
      },
      {
         "children": [
            "7d91e2b6044511ec8c6860a44c24df47",
            "ae75efb205dc11ec99dd60a44c24df47"
         ],
         "data": {
            "Name": "Status Notes &amp; History"
         },
         "format": "DEFAULT",
         "uid": "6a9ec0a1044511ecb05b60a44c24df47"
      },
      {
         "children": [
            "b6bd801803cb11eca6e660a44c24df47",
            "caeabe8903ca11eca20b60a44c24df47",
            "7cb7306005d711ec9fde60a44c24df47",
            "fa5bb02106e811ec8a8d60a44c24df47",
            "635cdcd6050f11ec918660a44c24df47",
            "65891ef303cb11ec894160a44c24df47",
            "85c925a2050f11eca8b260a44c24df47"
         ],
         "data": {
            "Created": "2021-08-22 15:29:30.675198",
            "Hook": "data the completely identifies an XUUID",
            "Name": "Hard Data",
            "Notes": "The hard data for an XUUID takes the form of key-value pairs.\nA key is always a UTF-8 string.\nA value can be either a UTF-8 string, or another XUUID.\nIt is critical that an XUUID is clearly distinguishable from a UTF-8 string, however it is represented.\n\n(NOTE: the following notes about JSON and NLSD are highly speculative.  2021-08-22)\nIn JSON, it would most likely be represented as a dictionary, and literally represented.\nIn NLSD, it would most likely be either (A) a literal dictionary, or (B) a string with a short-hand identifier, and a meta tag reading \"XUUID\".\n\nThe basic strategic idea is this:\n* Represent the type of information that is being identified.\n* Represent a lot of identifying information about the thing identified.\n* Include the time that the identifier was created.\n* Include some random information as well.\n\nThe identifying information is information that should not change.\n\nPeople and things change, and people will want to change the identifiers for themselves and for the things they care about.  It is not impossible to change identifiers, but it is cumbersome.  So it is important to choose identifiers that are unlikely to change, and it is also important that system tooling support is able to change identifiers as well.\n\nThe XUUID system is flexibility -- no particular key-value pairs are strictly required.  (Although, the \"null identifier\", an identifier with nothing in it, is not particularly valuable.)  The more key-value pairs that are present in the XUUID, the more descriptive it can be, and the greater that the guarantee of uniqueness will be.  Descriptiveness also assists at the time of identifying equivalences."
         },
         "format": "Fat_Info",
         "uid": "6b0087f0039811ec8e3e60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 10:50:25.130912",
            "Description": "a 32-bit scheme for uniquely identifying data items, primarily relying on randomness for autonomy and non-collision",
            "Hook": "Universally Unique Identifier",
            "Name": "UUID",
            "Notes": "for example: \"013a6b57-51ba-4787-b6c5-474f2299d5ad\"\n\naka: \"GUID\" or \"Globally Unique Identifier\" -- in Microsoft's context",
            "WikipediaURL": "https://en.wikipedia.org/wiki/Universally_unique_identifier"
         },
         "format": "Inquiry_Definition",
         "uid": "6de14041037111ec886460a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-26 20:39:50.383764",
            "Hook": "an accountable agent that ensures uniqueness and caretakes meaning through maintenance",
            "Name": "Authority",
            "Notes": "For example, the domain name system has a hierarchical system of authorities managing names.\n\nDisputes about naming and meaning can be resolved by talking with various authorities.\n\n(Whereas with version 4 UUIDs, there are no authorities;  There is no specific entitlement to any particular UUID.)"
         },
         "format": "Fat_Info",
         "uid": "6edd95c806e811eca74160a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 21:27:36.432461",
            "Hook": "where one can get data associated with this identifier",
            "Name": "Sourcing",
            "Notes": "One interesting thing about the contemporary use of URLs as identifiers, is that the URL itself provides its own source information.\n\nFor example, a lot of W3C specifications are identified by a URL.  If you go to that URL, you see the full text of the specification, presented as a web page.\n\n"
         },
         "format": "Fat_Info",
         "uid": "7182e90903ca11ecae2060a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-23 10:13:33.802107",
            "Name": "How will JSON data reference XUUIDs?",
            "Research": "Possibilities:\n* Shortnames are remapped and chosen so as not to conflict with genuine values.\n\nNote:\n* Direct embedding isn't really an option, because TYPE values often reference other types, which themselves reference other types, etc.,.  The chain can get quite long, and you'd need to embed the entire thing for every type.\n  -- it seems that the JSON packaging must include some sort of \n  -- it might be worth looking into general JSON container formats -- do they exist?"
         },
         "format": "Fat_Question",
         "uid": "723d00d1043511ec977c60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion Kimbro",
            "Created": "2021-08-22 13:06:36.191687",
            "Description": "I use the word \"GUUID\" to refer abstractly to any identifier that is part of a system of universally unique identification, and a \"GUUID System\" to refer to the system itself",
            "Hook": "general unversally unique identifier",
            "Name": "GUUID",
            "Notes": "A UUID is a UUID and also a GUUID.\nAn XUUID is a XUUID and also a GUUID.\nBut a UUID is not an XUUID, and vice versal."
         },
         "format": "Inquiry_Definition",
         "uid": "74362dcd038411ecb67b60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 13:42:25.054411",
            "Hook": "short identifiers",
            "Name": "Brief",
            "Notes": "Setting aside for the moment the concern that shorter identifiers are more likely to collide than longer identifiers, a shorter identifier is preferable to a longer identifier, simply because shorter identifiers cost more.\n\nWhen identifiers are sufficiently short, they can be held in a person's memory, especially if the identifier is also memorable."
         },
         "format": "Fat_Info",
         "uid": "75089bf1038911ec9e0e60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 10:57:47.951274",
            "Description": "Microsoft's name for a UUID",
            "Hook": "Microsoft's name for a UUID",
            "Name": "GUID"
         },
         "format": "Inquiry_Definition",
         "uid": "75d246a4037211ecb3b760a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion Kimbro",
            "Created": "2021-08-25 11:44:22.328731",
            "Hook": "domain owner manages the space and takes responsibility for uniqueness",
            "Name": "uniqueness"
         },
         "format": "Inquiry_Pro",
         "uid": "76a3b01405d411ec968c60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:41:39.700167",
            "Hook": "can you line a series of things up in a row?",
            "Name": "Sequencable",
            "Notes": "Timestamps are sequencable.\nSerial number assigned items are sequencable.\n\nRandom draws are not sequencable, without supplemental data.\n"
         },
         "format": "Fat_Info",
         "uid": "7778f1c605dc11ecb25f60a44c24df47"
      },
      {
         "children": [
            "6a9ec0a1044511ecb05b60a44c24df47",
            "825a24df03cc11ec861a60a44c24df47",
            "466ffeab039811ec99ec60a44c24df47",
            "226b0abd043411ec9cc660a44c24df47",
            "1436a58b043411ecb6c160a44c24df47",
            "179c5300037111ecb09560a44c24df47"
         ],
         "data": {
            "Contact": "Lion Kimbro",
            "Created": "2021-08-22 10:07:46.848129",
            "Description": "What if there were a unique page number, for every thing you can imagine?\nYou can name it, and feel confident that that name is unique everywhere, and could be, at least hypothetically speaking, found?\nOr that it is like language, and that you and others who also share interest in the thing, could communicate about it?\n\nThat sketches the basic scope of this project.\n\nThis project is both a declaration, and an inquiry.  That is, there is material here, but there is also openness.\n\nThis project lives in an idea between three points: an academic inquiry, a data specification, and a software implementation.  But the primary point of the project is the development of the idea.\n\nYou are invited to participate in it, as well, in whatever capacity you choose.\n\nWhile I intend to make working software and an implementable speficication, the primary focus of the work is to develop the idea, so that it is the right idea.  The belief is that then, those who are better positioned towards the propoagation of the idea into form and social adoption and such, will hear about the idea, and be informed by the idea, and hopefully, the best parts of the idea will achieve realization.\n\nThere is another possibility, which is that there may already be centers of activity that have previously discovered this idea, or a superior one, and developed it.  If this is the case, the goal is to find out about that effort, and join it.\n\nSo there are parts of this project that are about education, both learning things ourselves, and teaching others.  Talking with the global community and looking for others similarly motivated is important as well.  Then there are other parts of this project that are about imagination and invention.  And there are other parts of this project that are about writing specifications and tinkering with code.  There may even be good code that implements a solid specification and that is fully useable as a demonstration.  I would be very happy if we even found that this system was reimplemented and used broadly in various systems in the world.  But the primary goal here is to develop the idea of a truly globally unique identification system that also works locally with short names.",
            "EmailAddress": "LionKimbro@gmail.com",
            "Hook": "Extended Universally Unique Identifiers",
            "Log": "2021-08-22 document formed",
            "Name": "XUUIDs",
            "Notes": "All time references are localtime (Seattle, WA,) unless otherwise specified.",
            "PhoneNumber": "206.427.2545"
         },
         "format": "Inquiry_Project",
         "uid": "7906470a036b11ec929960a44c24df47"
      },
      {
         "children": [
            "877316b905d711eca70660a44c24df47"
         ],
         "data": {
            "Created": "2021-08-25 12:06:01.013052",
            "Hook": "version# for the data",
            "Name": "Version"
         },
         "format": "Fat_Info",
         "uid": "7cb7306005d711ec9fde60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-23 12:08:30.495972",
            "Hook": "Project Started",
            "Name": "2021-08-23",
            "Notes": "COMPLETED:\n* basic thought and layout\n\nTODO:\n* spec out pyxuuid\n* spec out XUUIDs in NLSD\n* spec out XUUIDs in JSON\n"
         },
         "format": "Fat_Info",
         "uid": "7d91e2b6044511ec8c6860a44c24df47"
      },
      {
         "children": [
            "979c2aea036c11ec90fc60a44c24df47",
            "0505f7f1038411ec99b760a44c24df47",
            "c5f2552c036d11ec8dec60a44c24df47"
         ],
         "data": {
            "Name": "Introducing the Problem Space"
         },
         "format": "DEFAULT",
         "uid": "825a24df03cc11ec861a60a44c24df47"
      },
      {
         "children": [
            "3d689e4c051211ecb5fb60a44c24df47",
            "75d246a4037211ecb3b760a44c24df47",
            "74362dcd038411ecb67b60a44c24df47",
            "2b0b942903d511ecb6c560a44c24df47",
            "c281cf0f09ed11ec8d8160a44c24df47",
            "4230cc4503d511ecb57960a44c24df47",
            "afd8846803d411ecb50060a44c24df47",
            "3967192103d511ecbb0160a44c24df47",
            "6de14041037111ec886460a44c24df47",
            "37a27774038611ec839f60a44c24df47"
         ],
         "data": {
            "Name": "Master Index"
         },
         "format": "DEFAULT",
         "uid": "85c06b89037211eca4fe60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-24 12:14:36.884317",
            "Hook": "random data unlikely to be replicated",
            "Name": "Random Information",
            "Notes": "Note that if Authority information (+ a date that the authority is possessed) is supplied, random information is not as necessary.\nRandom information would protect against mistaken dual assignment of the same identifier by the same authority, but other than that, it is not necessary in that case."
         },
         "format": "Fat_Info",
         "uid": "85c925a2050f11eca8b260a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-24 12:13:00.000000",
            "Name": "TO WRITE",
            "Notes": "I need to write further about this."
         },
         "format": "Todo_Flag",
         "uid": "877316b905d711eca70660a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion Kimbro",
            "Created": "2021-08-25 11:44:51.384403",
            "Description": "",
            "Hook": "you have to own a domain, and keep owning the domain",
            "Name": "domain required"
         },
         "format": "Inquiry_Con",
         "uid": "87f53b4205d411ecb15d60a44c24df47"
      },
      {
         "children": [
            "6063fa12043511ec840860a44c24df47",
            "723d00d1043511ec977c60a44c24df47"
         ],
         "data": {
            "Created": "2021-08-23 10:07:08.405958",
            "Hook": "listing identifiers via JSON",
            "Name": "XUUID specification via JSON",
            "Notes": "It's not possible to distinguish types in JSON, so XUUID information is supplied alone, in a separate file.  I'm not sure how I'm going to make this work."
         },
         "format": "Fat_Info",
         "uid": "8c8637bf043411ec988860a44c24df47"
      },
      {
         "children": [
            "6de14041037111ec886460a44c24df47",
            "75d246a4037211ecb3b760a44c24df47",
            "37a27774038611ec839f60a44c24df47",
            "74362dcd038411ecb67b60a44c24df47"
         ],
         "data": {
            "Name": "Universally Unique Identifiers"
         },
         "format": "DEFAULT",
         "uid": "8d8efb24037211ecaa6560a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:49:27.000802",
            "Hook": "looking at a UUID, you have no idea what it is for",
            "Name": "not descriptive"
         },
         "format": "Inquiry_Con",
         "uid": "8e015cd405dd11ecb2e860a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 13:36:04.337796",
            "Hook": "",
            "Name": "Are collisions recoverable?",
            "Question": "Are collisions recoverable?"
         },
         "format": "Fat_Question",
         "uid": "921bb627038811ecb0cd60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion",
            "Created": "2021-08-26 22:21:10.901787",
            "Hook": "you don't have to have special code to handle tag URIs, like you do with XUUIDs",
            "Name": "Tag URIs requier NO machinery"
         },
         "format": "Inquiry_Con",
         "uid": "9723010f06f611ecbd3d60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 10:15:47.658826",
            "Hook": "brainstorming topics",
            "Name": "Preliminary Thoughts",
            "Notes": "\nBasic structure of my idea:\n* What a truly globally unique identifier looks like.\n* Pargmatics of an identifier:\n** a hard identifier -- that which, without, the thing is not uniquely identified\n** soft information -- authentication, sourcing, recommended naming, and other descriptive information\n** local information -- local short name, cached location, local annotation\n"
         },
         "format": "Fat_Info",
         "uid": "979c2aea036c11ec90fc60a44c24df47"
      },
      {
         "children": [
            "b209c23b03cf11eca8aa60a44c24df47",
            "da83944803d011ecb3ae60a44c24df47",
            "cd2172a603d311ec8aa260a44c24df47",
            "19e751f203d111ecbd9160a44c24df47",
            "f85c6ff709ed11eca07960a44c24df47"
         ],
         "data": {
            "Created": "2021-08-22 22:04:30.597383",
            "Hook": "drawbacks of this system",
            "Name": "Concerns with XUUID"
         },
         "format": "Fat_Info",
         "uid": "9941aa4e03cf11ecaaa460a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:49:57.880427",
            "Hook": "not at all",
            "Name": "not memorable"
         },
         "format": "Inquiry_Con",
         "uid": "a069383205dd11ec81c860a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-30 17:01:49.529386",
            "Hook": "example of an LSF file with an integrated key file",
            "Name": "LSF w/ integrated Key File",
            "Notes": "author: person:lionkimbro\n\n== XUUID Identifiers ==\ndate: 2021-08-30\naspect: keyfile\ntags: json\n\n[{\"HARD\": {...},\n  \"SOFT\": {...},\n  \"LOCAL\": {\"NAME\": \"person:lionkimbro\"},\n ...]\n\n"
         },
         "format": "Fat_Info",
         "uid": "a3b89bad09ee11eca5db60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:50:16.647994",
            "Description": "To be fair -- XUUIDs are even longer than UUIDs, in the main.  (I can easily imagine that XUUIDs will typically CONTAIN UUIDs.)\n\nI'm hoping that the XUUID concept is delivered to the world with the recognition that we need tools in order to support long identifiers, and that these tools should maintain process-local or machine-local short names to accompany the long identifiers.",
            "Hook": "not at all",
            "Name": "not brief"
         },
         "format": "Inquiry_Con",
         "uid": "ab98ec4605dd11ec8dff60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion Kimbro",
            "Created": "2021-08-25 11:44:22.328731",
            "Description": "",
            "Hook": "the URL is both an identifier, and a sourcing location more information",
            "Name": "sourcing"
         },
         "format": "Inquiry_Pro",
         "uid": "abb22f0205d411ec92a960a44c24df47"
      },
      {
         "children": [
            "b63a3a45064311ec9ff160a44c24df47"
         ],
         "data": {
            "Created": "2021-08-26 01:00:25.923627",
            "Hook": "TO RESEARCH",
            "Name": "OIDs",
            "Notes": "\"OIDs\" seem to be a numerically expressed tree of nodes.\n\nWikipedia gives this example:\n\n1 ISO\n1.3 identified-organization,\n1.3.6 dod,\n1.3.6.1 internet,\n1.3.6.1.4 private,\n1.3.6.1.4.1 IANA enterprise numbers,\n1.3.6.1.4.1.343 Intel Corporation\n\n",
            "SupportURL": "https://en.wikipedia.org/wiki/Object_identifier"
         },
         "format": "Fat_Info",
         "uid": "abf5e1af064311ec857660a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:43:11.955141",
            "Hook": "extending with ideas from conversation with Ciprian Craciun",
            "Name": "2021-08-25",
            "Notes": "I had a conversation with ciprian.craciun.\n\nWe talked about several things, including:\n* serial numbers; I've added a section on \"Sequencable\" as a virtue for an identifier system; also a tidbit (Library/Tidbits/serial number problems) about some gotchas, working with serial numbers\n* IETF standardized \"tags,\" which I am adding to a new \"Related Works\" section in the Library, and have similarities to the XUUID concept\n\nI've also written a bit about version numbers."
         },
         "format": "Fat_Info",
         "uid": "ae75efb205dc11ec99dd60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 21:29:18.766821",
            "Hook": "data associated with the identifier",
            "Name": "Bundled Data",
            "Notes": "This refers to data that is packaged along with an identifier, or otherwise associated with the identifier, but that is not specifically about the identifier.\n\nData often comes in bundles, and it is reasonable to think that data will be bundled with identifiers, that is not specifically about the identifiers.  This is called \"bundled\" data."
         },
         "format": "Fat_Info",
         "uid": "ae81e4f703ca11ecaad860a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:57:31.460758",
            "Hook": "how safe is it for people to divide the UUID space?",
            "Name": "divisibility of UUIDs",
            "Question": "What if people habitually divided the UUID space, in order to generate and maintain sequences?\n\nFor example, I have ten things.  I generate 10 UUIDs, sort them, and then assign them to the ten things, matching those ten things' sequence.\n\nNow I want to add ten things between thing #2 and #3 that existed before.  I generate UUIDs until I get 10 numbers that fit between the GUIDs for things #2 and #3, sort them, and assign them to the new things between #2 and #3.\n\nLather, rinse, repeat.\n\nIs this safe?  After how many iterations does this most likely break down?\nAnd what are the impacts for the global UUID space?  What is the likelihood of collisions arising if many people are doing this?  What if two people follow the same series of insertions, -- what is the likelihood of colliding?\n\nOne can imagine encoding the digits of pi by this procedure: Pick 10 GUIDs randomly, sort, and take the third one.  That represents \"3\".  Now divide the space between the 3rd and the 4th into 10 GUIDs picked randomly, sort, and take the first.  That represents \"3.1\".  Now divide the space between the first and the second of those divisions.  Take the 4th.  That represents \"3.14\".  Do on and on as many times as you can.  How many digits of pi did you pick out before you couldn't go further?  And what was your GUID?  How many people in the world can perform this procedure, before the likelihood of two people picking the same GUID got to, or above, 0.5?",
            "Research": "This does mean that with each new item you add between others, you are narrowing the random search space.  Now if you are randomly inserting, this is a ln(N) problem -- and thus possibly not a problem at all.\n\nFrom the standpoint of \"boy, there's a lot of space in the GUID world,\" it looks kind of like infinitely divisible real numbers between 0.0 and 1.0.  If I had 0.1 and 0.2, I have a whole lot of options about how to subdivide that space.\n\nBut the GUIDs are not even countably infinite.  There is a limit.  Where is it?",
            "URL": "https://math.stackexchange.com/questions/4233122/whats-the-likelihood-of-a-uuid-collision-through-repeat-subdivision"
         },
         "format": "Fat_Question",
         "uid": "aec415e405de11ecb95360a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion Kimbro",
            "Created": "2021-08-22 22:40:55.979530",
            "Description": "This is a greatly shortened identifier, for use within a program's own scope, standing in for a much longer, full identifier.",
            "Hook": "a short identifier for an XUUID",
            "Name": "shortname"
         },
         "format": "Inquiry_Definition",
         "uid": "afd8846803d411ecb50060a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Hook": "web page intended for exploration of this concept",
            "Name": "Tag URI",
            "URL": "http://www.taguri.org/"
         },
         "format": "Research_Link",
         "uid": "b07b9da6064411ec9f1a60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-23 10:08:21.800233",
            "Hook": "Python Module for reading XUUID data and managing short names",
            "Name": "pyxuuid"
         },
         "format": "Fat_Info",
         "uid": "b1ef84d0043411ecb11660a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 22:05:12.174034",
            "Hook": "meaningful information in the identifier is available to anyone or anything that encounter it",
            "Name": "Privacy Leaks",
            "Notes": ""
         },
         "format": "Fat_Info",
         "uid": "b209c23b03cf11eca8aa60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-26 01:00:43.148755",
            "Name": "TO RESEARCH"
         },
         "format": "Todo_Flag",
         "uid": "b63a3a45064311ec9ff160a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 21:36:42.075957",
            "Name": "CHECK: claim about XUUID",
            "Notes": "In \"Hard Data\" note, I wrote:\n-----------------------------------------\n(NOTE: the following notes about JSON and NLSD are highly speculative.  2021-08-22)\nIn JSON, it would most likely be represented as a dictionary, and literally represented.\nIn NLSD, it would most likely be either (A) a literal dictionary, or (B) a string with a short-hand identifier, and a meta tag reading \"XUUID\".\n-----------------------------------------\nThat's pretty speculative."
         },
         "format": "Todo_Flag",
         "uid": "b6bd801803cb11eca6e660a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 21:51:11.540735",
            "Hook": "other identifiers that this identifier can be considered equivalent to",
            "Name": "AKA",
            "Notes": "For example, if the XUUID were:\n\n  {\"TYPE\": [XUUID:] \"TYPE.PERSON\",\n   \"NAME\": \"Lion Kimbro\",\n   \"DOB\": \"1977-08-29\",\n   \"BIRTHPLACE\": \"Monterey, CA\",\n   \"RANDOM\": \"f0838b3c-dc7c-440d-b941-4b1d07d7eda4\"}\n\n...a given piece of AKA information might be:\n\n  {\"TYPE\": [XUUID:] \"TYPE.PERSON\",\n   \"NAME\": \"David Rushton Brock Kimbro\",\n   \"DOB\": \"1977-08-29\",\n   \"BIRTHPLACE\": \"Monterey, CA\",\n   \"RANDOM\": \"7f2635e8-8a6a-4a83-8028-6c0a923790d5\"}\n\n...and still another might be:\n\n  {\"TYPE\": [XUUID:] \"TYPE.PERSON\",\n   \"USERNAME\": \"ultraman\",\n   \"HOST\": \"The Armory\",\n   \"LOCATION\": \"UCSC, Santa Cruz, CA\",\n   \"RANDOM\": \"ca5f43b0-65ac-444d-b84d-adb809278649\"}\n\nIf the soft data for identifier included an AKA list, these two additional identifiers might be supplied, "
         },
         "format": "Fat_Info",
         "uid": "bcfb4bfe03cd11ecb2f660a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-23 12:10:11.375528",
            "Name": "WARNING: NONE OF THIS HAS EVEN BEEN STARTED"
         },
         "format": "Todo_Flag",
         "uid": "bd1df899044511ec8b2e60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion",
            "Created": "2021-08-26 22:22:15.733820",
            "Description": "Because key-value pairs are clearly demarked, any key's value can be segregated to sort on.\nWith Tag URIs, lacking keys, it's harder to pick out what exactly is being sorted on.  You have to rely more on convention, and assuming that the type of the tag is in fact the type that you think it is.",
            "Hook": "and they can be sequenced on multiple dimensions",
            "Name": "XUUIDs can be unambiguously sequenced"
         },
         "format": "Inquiry_Pro",
         "uid": "bdc7965f06f611ec9e0760a44c24df47"
      },
      {
         "children": [
            "1dc1d4fb045111ec81e360a44c24df47"
         ],
         "data": {
            "Answer": "It's confined to MIME data.\nI think the concept can be applied more broadly, but people mean MIME data when they say it, it seems.",
            "Created": "2021-08-23 13:28:58.736674",
            "Hook": "Do I correctly understand the idea of \"multi-part\" data?",
            "Name": "\"Multi-part\" ..?",
            "Question": "What does \"multi-part\" really mean?",
            "Research": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types",
            "WikipediaURL": "https://en.wikipedia.org/wiki/MIME#Multipart_messages"
         },
         "format": "Fat_Question",
         "uid": "bed8095c045011ecb11960a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 13:44:29.757301",
            "Hook": "identifiers that a person can hold in their mind",
            "Name": "Memorable",
            "Notes": "There is certainly a connection between suggestive and memorable, but not necessarily.\n\nHere I am refering to the ability to hold an identifier in mind.\n\n\"X5K\" is not suggestive, but it is more memorable than \"4DX9EPZ5M2PPX\".\n\nNote that \"Banana\" may be just as memorable as \"Axe,\" regardless of \"Axe\" being shorter than \"Banana.\""
         },
         "format": "Fat_Info",
         "uid": "bf5cc292038911ecabcf60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 10:38:25.327995",
            "Hook": "GUIDs suggest nothing",
            "Name": "GUIDs are NOT suggestive"
         },
         "format": "Fat_Info",
         "uid": "c0d80ad1036f11ec8c7260a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-23 13:36:11.605193",
            "Hook": "Would this term be useful?",
            "Name": "\"Container-format\" ..?",
            "Research": "\"A container format (informally, sometimes called a wrapper) or metafile is a file format that allows multiple data streams to be embedded into a single file, usually along with metadata for identifying and further detailing those streams.[1] Notable examples of container formats include archive files (such as the ZIP format) and formats used for multimedia playback (such as Matroska, MP4, and AVI). Among the earliest cross-platform container formats were Distinguished Encoding Rules and the 1985 Interchange File Format.\"",
            "WikipediaURL": "https://en.wikipedia.org/wiki/Container_format_(computing)"
         },
         "format": "Fat_Question",
         "uid": "c0da87da045111eca66060a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion",
            "Created": "2021-08-30 16:55:31.682894",
            "Hook": "a file that associates shortnames with XUUID identifiers for a particular scope",
            "Name": "key file"
         },
         "format": "Inquiry_Definition",
         "uid": "c281cf0f09ed11ec8d8160a44c24df47"
      },
      {
         "children": [
            "ccf1dee5038a11ecb8c060a44c24df47",
            "d922a86a038a11ec9e1e60a44c24df47",
            "d460d77b038a11ec82f860a44c24df47"
         ],
         "data": {
            "Created": "2021-08-22 10:24:14.895441",
            "Hook": "(GUIDs, UUIDs)",
            "Name": "Are GUIDs good unique global identifiers?",
            "Question": "Are GUIDs good unique global identifiers?\nNote that -- What is \"good\" is explored in: \"What qualities might we be looking for in a GUUID system?\"",
            "Research": ""
         },
         "format": "Fat_Question",
         "uid": "c5f2552c036d11ec8dec60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 10:38:40.152537",
            "Hook": "there is a lack of system support for using them",
            "Name": "ABBREVIATION SUPPORT LACKING",
            "Notes": "\n\nhttps://blog.codinghorror.com/primary-keys-ids-versus-guids/\n\"Cumbersome to debug where userid='{BAE7DF4-DDF-3RG-5TY3E3RF456AS10}'\"\n\nAndrew P comments: \"Another advantage of integers however is that they produce friendlier URLs. For web apps, I favor the HiLo table key pattern.\""
         },
         "format": "Fat_Info",
         "uid": "c9ae167f036f11ec854660a44c24df47"
      },
      {
         "children": [
            "afd8846803d411ecb50060a44c24df47",
            "37a27774038611ec839f60a44c24df47",
            "c281cf0f09ed11ec8d8160a44c24df47",
            "4e53716c03d511eca3f360a44c24df47"
         ],
         "data": {
            "Name": "XUUID-specific terminology"
         },
         "format": "DEFAULT",
         "uid": "ca186f1803d411ecb60960a44c24df47"
      },
      {
         "children": [
            "e44e378b050e11ec945f60a44c24df47"
         ],
         "data": {
            "Created": "2021-08-22 21:30:06.430170",
            "Hook": "the type of thing identified",
            "Name": "Type",
            "Notes": "One of the most descriptive things that can go into an identifier is the type of the thing identified.  For example, if the thing identified is a person, then there should be something like: \"TYPE\": \"PERSON\".\n\nI propose that TYPE is a standard recommendation.  Unless there is a specific reason not to, all XUUIDs SHOULD feature a \"TYPE\" key.\n\nBut \"PERSON\" might not be specific enough -- it'd be nice to have a genuine XUUID for a Person, as well, for many reasons.  For example, \"PERSON\" might mean, \"a Person, as a concept within this particular context\" -- perhaps in a video game, for instance.  Or \"person\" might mean a citizen of a specific country, in a particular context.  To clarify that what is identified is \"a real life person who is or has been alive in the material universe,\" we might want to have a very specific identifier.\n\nThat is, there should probably be a specific identifier for the person type itself.\n\nSo while the value of \"TYPE\" can be a freehand string, -- which would be perfectly fine in many ordinary conventional uses, if we want to make something a little more formal, we can also use a specific XUUID as the value.\n\nA person type might look something like:\n\n  {\"TYPE\": [XUUID:] \"TYPE\",\n   \"TITLE\": \"Person\",\n   \"VERSION\": 1,\n   \"DESCRIBES\": \"A human person, real or imaginary.\",\n   \"RANDOM\": \"994adda1-ad02-4566-9169-31595895cd3d\"}\n\nNote here that type itself needs to be defined.  It might look like so:\n\n  {\"TYPE\": \"XUUID TYPE\",\n   \"TYPENAME\": \"XUUID TYPE\",\n   \"VERSION\": 1,\n   \"DESCRIBES\": \"A TYPE within conventional XUUID type identifiers.\",\n   \"RANDOM\": \"b8205bc2-7d9f-428f-b6a7-75668ff82162\"}\n\nNote that these identifiers are fairly descriptive.\n\nIt is an open question to me whether the description should be in the soft data, or in the hard data.\nIf the description is kept in the soft data, then it can be changed with context and evolution of understanding.  In the hard data, it is fixed.  I can see advantages on either side -- definitness, or malleability.  For \"Person,\" it makes a clear statement about what it is.  If you changed the definition, you would have a different type.\n\nThis is an example of a place where we can see the difference between UUIDs and XUUIDs.  Looking at a UUID, such as 994adda1-ad02-4566-9169-31595895cd3d, we cannot see what it is about.  But here, due to the \"TYPE\" information, we can read clearly that this is an identifier of an XUUID type."
         },
         "format": "Fat_Info",
         "uid": "caeabe8903ca11eca20b60a44c24df47"
      },
      {
         "children": [
            "62981d4609f211ec912560a44c24df47"
         ],
         "data": {
            "Created": "2021-08-30 12:02:16.449939",
            "Hook": "you can't rigorously identiify types, and thus you can't rigorously decode the data",
            "Name": "The Tag URI Type Problem",
            "Notes": "Tags are great at being unique, but they aren't nestable.\n\nWhat that means is that you can't put a tag inside of a tag, and thus you can't uniquely identify a type.\n\nThe identify can meaningful to a human, but it can't be unambiguously meaningful to a machine.\n\nOf course, you can make up a convention like:\n\n  tag:lionkimbro@gmail.com,2021-08-30:person:LionKimbro\n                                      --+--- ----------\n                                        |             `\n                              made up type indicator   convention: this is the person's name, scrunched up\n\n...but somebody else could also use \"person\", and have a different convention.\n\nNow the identifier will still be UNIQUE, supposing that the different programs the user uses that assign identifiers don't step on one another's toes --\nBut if a computer is looking at an identifier made by something else, it can't tell if its compatible or not, easily.\n\nNow you could perhaps make the identifier something like:\n\n  tag:lionkimbro@gmail.com,2021-08-30:2021-08-30-lionkimbro@gmail.com-person:LionKimbro\n\n...and that would work.\nBut the more pieces of information you want to nest, the longer and longer this thing gets, until you may as well just use XUUID.\n\n\n"
         },
         "format": "Fat_Info",
         "uid": "caee2cbb09c411ec9cf360a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-27 00:02:51.196927",
            "Hook": "an example of collecting multiple identifiers, and using short names with them",
            "Name": "Example",
            "Notes": "[{\"HARD\": {\"TYPE\": \"ROOT-XUUID-TYPE\",\n           \"VER\": \"1\",\n           \"AUTHORITY\": \"lionkimbro@gmail.com\",\n           \"AUTHORITYDATE\": \"2021-08-27\"},\n  \"SOFT\": {\"DESCRIPTION\": \"The root XUUID type, that is used to express other XUUID types.\",\n           \"HARDKEYS\": \"TYPE TYPETITLE AUTHORITY AUTHORITYDATE\"},\n  \"LOCAL\": {\"NAME\": \"XUUIDTYPE\"}\n },\n {\"HARD\": {\"TYPE\": [\"XUUIDTYPE\"],\n           \"TYPETITLE\": \"URL Link Storage Database\",\n           \"DBVER\": 1,\n           \"AUTHORITY\": \"lionkimbro@gmail.com\",\n           \"AUTHORITYDATE\": \"2021-08-27\"},\n  \"SOFT\": {\"DESCRIPTION\": \"An identifier for a link storage database, of the type designed by Lion in 2021.\",\n           \"HARDKEYS\": \"...\"},\n  \"LOCAL\": {\"NAME\": \"URLDBTYPE\"},\n },\n {\"HARD\": {\"TYPE\": [\"URLDBTYPE\"],\n           \"TYPETITLE\": \"Lion's main link database\",\n           \"CREATOR\": \"lionkimbro@gmail.com\",\n           \"CREATEDON\": \"2021-08-27\"},\n  \"SOFT\": {},\n  \"LOCAL\": {\"NAME\": \"LIONSLINKDB\"},\n },\n {\"HARD\": {\"TYPE\": [\"XUUIDTYPE\"],\n           \"TYPETITLE\": \"Stored URL Link\",\n           \"VER\": \"1\",\n           \"FORDBTYPE\": [\"URLDBTYPE\"],\n           \"AUTHORITY\": \"lionkimbro@gmail.com\",\n           \"AUTHORITYDATE\": \"2021-08-27\"},\n  \"SOFT\": {\"DESCRIPTION\": \"\n  "
         },
         "format": "Fat_Info",
         "uid": "cb322bfe070411ec841060a44c24df47"
      },
      {
         "children": [
            "bed8095c045011ecb11960a44c24df47",
            "c0da87da045111eca66060a44c24df47"
         ],
         "data": {
            "Created": "2021-08-23 13:22:11.068908",
            "Name": "JSON Multi-part Format Exists?",
            "Question": "I want to know if there's an established standard for multi-part JSON data?\nWhat I mean is a kind of file that has many different parts to it, the user of which might be interested in one part or another but not necessarily all of the parts.\nI am thinking about for example graphic resources associated with a program, or whatever.",
            "Research": "- multipart\n- container\n- resource file\n- composite document"
         },
         "format": "Fat_Question",
         "uid": "cbdadf40044f11ecabe960a44c24df47"
      },
      {
         "children": [
            "ffd52fbe039711eca77560a44c24df47"
         ],
         "data": {
            "Name": "Pro"
         },
         "format": "DEFAULT",
         "uid": "ccf1dee5038a11ecb8c060a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 22:34:35.614685",
            "Hook": "AKA blocks make it easier to put 2+2 together",
            "Name": "Automated Inference",
            "Notes": "The idea of AKA blocks in the Soft Data section, if automated, make it easier for people to make assertions about what identities are linked with what other identities.\n\nThis is a general danger with computers and specifically databases, *period,* but we need to understand what we're stepping into.  Anything that automates inferencing changes the landscape, and is likely to do so in unexpected ways.  This is a danger of the XUUID system that must be understood and thought about."
         },
         "format": "Fat_Info",
         "uid": "cd2172a603d311ec8aa260a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Behrooz, Founder &amp; CTO at Rayan Pardazesh Espand",
            "Created": "2021-08-22 11:28:53.549774",
            "Hook": "saw a GUID collision in MSSQL 2008 R2",
            "Quotation": "\"Everybody saying no is wrong.I already have collided 1 UniqueIdentifier with a dataset of less than half a million records, MSSQL 2008 R2\"",
            "SourceURL": "https://stackoverflow.com/questions/184869/are-guid-collisions-possible#comment15551334_184869"
         },
         "format": "Inquiry_Quotation",
         "uid": "cdce040f037611ec88b960a44c24df47"
      },
      {
         "children": [
            "f4596f06038711ecaa4d60a44c24df47",
            "921bb627038811ecb0cd60a44c24df47",
            "1dc411c4038811ecbcf960a44c24df47",
            "2733b997038811eca52a60a44c24df47",
            "2d0d851b038811eca15a60a44c24df47"
         ],
         "data": {
            "Created": "2021-08-22 13:30:39.579003",
            "Hook": "(which is a given)",
            "Name": "Unique",
            "Notes": "The root assumption of this project is that we're looking for a universally unique identifier.\n\nStill, there are some questions about \"uniqueness,\" primarily in the realm of probabilities and error tolerance."
         },
         "format": "Fat_Info",
         "uid": "d0899ad7038711ec91d160a44c24df47"
      },
      {
         "children": [
            "bd1df899044511ec8b2e60a44c24df47"
         ],
         "data": {
            "Name": "Completed"
         },
         "format": "DEFAULT",
         "uid": "d34ca269044511ec8d4860a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 21:51:49.156429",
            "Hook": "hints for meaningfully expressing this XUUID in a short way",
            "Name": "Suggested Naming",
            "Notes": "For example, suggestions (\"suggestions?\" \"recommendations?\") might be expressed with:\n\n  \"SUGGESTEDSHORTNAMES\": \"LION LIONK LIONKIMBRO KIMBRO LEO\"\n\nAnything could be done with these suggestions; Perhaps:\n\n  \"LION\"\n  \"LION1\"\n  \"LION2\"\n  \"LION3\"\n  \"LION.A\"\n  \"LION.B\"\n  \"LION.C\"\n  ...\n\nThese are only suggestions via the soft data, for how to shorten the data item;  It might just be assigned a local serial number and that's it."
         },
         "format": "Fat_Info",
         "uid": "d366d7f803cd11ec959e60a44c24df47"
      },
      {
         "children": [
            "c0d80ad1036f11ec8c7260a44c24df47",
            "c9ae167f036f11ec854660a44c24df47"
         ],
         "data": {
            "Name": "Con"
         },
         "format": "DEFAULT",
         "uid": "d460d77b038a11ec82f860a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 22:49:10.447501",
            "Hook": "descriptive information in addition to whatever information is present in the hard identifier",
            "Name": "Additional Descriptive Information",
            "Notes": "For example, my identifier could be linked with associated soft data:\n\n  {\"SEX\": \"MALE\"}\n\nOr an image identifier could have soft data attached, that includes an actual image:\n\n  {\"BMPBASE32\": \"IJGV4AAAAAAAAAAAHYAAAABIAAAAACAAAAAAQAAAAAAQAAIAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB77774AP6AAAACBQAAAAXMAAAAH7AAAAB7YAAAALWAAAAD7QAAAA74AAAAA=\"}\n\nThat string is a base-32 encoding of a Windows BMP file of a crude happy-face character.\n\nIt's entirely reasonable to believe that the \"soft\" data might just be the hard data itself -- the identifier is itself the image, in its entirety.  The point of an identifier is often to be a key to a larger image, -- something that is specifically smaller so that it can reference a larger thing.  But it doesn't have to be, and use as a language token -- albeit a large language token -- has its own merit as well."
         },
         "format": "Fat_Info",
         "uid": "d692578403d511ec968460a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Description": "\"\"\"\n   This specification defines a Uniform Resource Name namespace for\n   UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally\n   Unique IDentifier).\n\"\"\"\n\nex: \"urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6\"",
            "Hook": "  <b>A Universally Unique IDentifier (UUID) URN Namespace</b>",
            "Name": "RFC-4122",
            "URL": "https://datatracker.ietf.org/doc/html/rfc4122"
         },
         "format": "Research_Link",
         "uid": "d6cd3af705fc11ecbe7d60a44c24df47"
      },
      {
         "children": [
            "34ed2b2a038411ec80f460a44c24df47"
         ],
         "data": {
            "Name": "Indetermant"
         },
         "format": "DEFAULT",
         "uid": "d922a86a038a11ec9e1e60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 16:19:11.701906",
            "Hook": "it seems like a notekeeping community",
            "Name": "Tools for Thought",
            "Notes": "I learned about this group when Tom pointed me to:\n\nhttps://lu.ma/tfti-august\n",
            "SupportURL": "https://talk.fission.codes/tag/tools-for-thought"
         },
         "format": "Fat_Info",
         "uid": "d9b3599505fa11ec87d460a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-25 12:22:56.556796",
            "Hook": "does an XUUID have a maximum size?",
            "Name": "maximum size",
            "Question": "The question is, \"Should there be a maximum size for an XUUID identifier?\"",
            "Research": "Having size limits makes it easier for machines to make guarantees and meet determinations about what can be consumed, and what cannot be consumed, and what requirements need to be met in order to fully implement a specification.\n\nI'd love to cap an XUUID at 1 MB, arbitrarily speaking, but that might be a problem at some point.  (If 1 MB isn't enough to uniquely identify your data, I don't know what would be.)  At that point, it seems like you're delivering entire files, rather than identifying things.\n\nHowever, devil's advocate:\nI can imagine that Jack's working on a gigantic photoshop image file -- it's 32 GB in size.\nA thumbnail is generated for it -- 1.1 MB in size.\nThat thumbnail is going to be used as the identifier for the 32 GB file.\n\nSketchy, but conceivable.  Seems a little ridiculous to me, but it's not totally crazy."
         },
         "format": "Fat_Question",
         "uid": "da06dde105d911ecb29060a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 22:13:29.577991",
            "Hook": "exposed information is not necessarily visible to casual users",
            "Name": "Unwitting Exposure",
            "Notes": "Not only is meaningful information in the identifiable available to programs that encounter it, but -- FURTHERMORE, it may be invisible to the user that is carrying it..!\n\nTo illustrate, imagine the following scenario:\n\nSuppose that a user logs into a computer with their username and password.\n\nUnbeknownst to them, an identifier, assembled from previous information that the user entered, is now associated with their login.  That identifier includes the users birthname, birthplace, and birthdate.\n\nThe user opens up a word processor and creates a document to be distributed publicly.  The word processor automatically fills out a field of \"Author,\" and the author is identified by the XUUID -- which includes the user's birthname, birthplace, and birthdate, as described above.\n\nNow the user uploads that document to an online community.\n\nNowhere in the user interface does the user see their birthname, birthplace, and birthdate, -- perhaps they only used an alias, because they do not trust the online community.\n\nBut someone technically savvy in the online community can look at the source code for the document, and see the XUUID for the author.  This user's XUUID includes their birthname, birthplace, and birthdate, and that information was unwittingly to the author included in the document that was posted online."
         },
         "format": "Fat_Info",
         "uid": "da83944803d011ecb3ae60a44c24df47"
      },
      {
         "children": [
            "ebec69e7070111ecb4b660a44c24df47"
         ],
         "data": {
            "Name": "Sketching a JSON Identifier Package"
         },
         "format": "DEFAULT",
         "uid": "de7793aa070111ec993960a44c24df47"
      },
      {
         "children": [
            "5f274c52043411ec80a360a44c24df47",
            "8c8637bf043411ec988860a44c24df47"
         ],
         "data": {
            "Name": "Conceptualizing"
         },
         "format": "DEFAULT",
         "uid": "dfe6c3dd044511ec8e1360a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-30 16:49:12.518676",
            "Hook": "how do you work with file formats that can only accept strings?",
            "Name": "strings-only data formats",
            "Question": "Take for instance LSF: how do I put into the LSF file that it's author is ME, Lion Kimbro?\n",
            "Research": "One thought --\nIs to use a \"key file\".\n\nThe key file associates the short strings with the full expansions required for their unique identification.\nThe key file is intended to be used with the file, wherever it appears.\n\nKey files may have a scope.\n\nI can imagine a read-only system-wide key file, or a system-wide live identifier database, that is perhaps append-only.\n  -- this introduces some particular complications:\n     if the system-wide key file is appended to,\n     and a name given conflicts with a name in a running program,\n     the running program needs to somehow detect this and hastily rename everything in its scope...\n\n  -- ...is that really a good idea?\n\nOr what if all identifiers run through a central system-wide process?\nThere are going to be lots of collisions, so the system-wide process of assigning \"local\" names is going to have to be pretty good..."
         },
         "format": "Fat_Question",
         "uid": "e081f0cd09ec11ec854960a44c24df47"
      },
      {
         "children": [
            "1ae11983064311ecb41160a44c24df47",
            "b07b9da6064411ec9f1a60a44c24df47",
            "1a8a18ca06ed11ec8a4560a44c24df47",
            "e39b684106f411ecaafa60a44c24df47"
         ],
         "data": {
            "Created": "2021-08-25 21:41:31.531887",
            "Hook": "XUUID is CLOSEST to this concept",
            "Name": "RFC-4151 Tags",
            "Notes": "Tag URIs are exceptionally close to the XUUID concept I describe here.\n\nTag URIs look like so:\n\n  tag:sandro@hawke.org,2001-06-05:Taiko\n\n\"tag:\"  -- identifies a Tag URI\n\"sandro@hawke.org\"  -- that's an email address, which specifically is chosen because it represents a clear authority at a given time\n\"2001-06-05\"  -- a date that that authority was under a specific person's control\n\"Taiko\"  -- the identfying information\n\nHere we see an Authority, a Time of Creation, and Identifying Information.\n\n---\n\nIt's really similar!\n",
            "SupportURL": "https://datatracker.ietf.org/doc/html/rfc4151"
         },
         "format": "Fat_Info",
         "uid": "e282385e062711ecaca760a44c24df47"
      },
      {
         "children": [
            "f80c89d206f411ecab8a60a44c24df47",
            "5519af4f06f611ecabc360a44c24df47",
            "5bfb244f06f611ec9afe60a44c24df47",
            "9723010f06f611ecbd3d60a44c24df47",
            "06c9b1e206f511ec89b760a44c24df47",
            "1e91402806f511ecb07d60a44c24df47",
            "2206dbf106f611ec9f6760a44c24df47",
            "bdc7965f06f611ec9e0760a44c24df47",
            "caee2cbb09c411ec9cf360a44c24df47"
         ],
         "data": {
            "Created": "2021-08-26 22:09:02.746667",
            "Hook": "they're really close, but there are differences",
            "Name": "How XUUID compares with Tag URIs",
            "Notes": ""
         },
         "format": "Fat_Info",
         "uid": "e39b684106f411ecaafa60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-24 12:10:05.966504",
            "Hook": "Should written descriptions go inside of hard type data?",
            "Name": "Written Descriptions?"
         },
         "format": "Fat_Question",
         "uid": "e44e378b050e11ec945f60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 22:49:36.215304",
            "Hook": "any additional information associated with the XUUID",
            "Name": "Additional General Information",
            "Notes": "Anything conceivably could be attached as soft data.\n\nFor example, suggested system configuration information could be associated with an identifier for a device driver.\n\n"
         },
         "format": "Fat_Info",
         "uid": "e5ee325703d511ec905060a44c24df47"
      },
      {
         "children": [
            "0de4aedc070411ec9b0460a44c24df47"
         ],
         "data": {
            "Created": "2021-08-26 23:42:23.767589",
            "Hook": "stores the list of identifiers, and bundled data, in a multi-part container format",
            "Name": "JSON Container Format",
            "Notes": "\n[{ part #1 },\n { part #2 },\n  ...\n { part #N }]\n\n\nEach part works like so:\n\n{\"TITLE\": \"title of section -- human readable\",\n \"IDENTIFIER\": &lt;hard identifier&gt;,\n \"CONTENT\": ...}\n\nThe identifiers for my sections have the specific form:\n- {\"TYPE\": \"JSON-CONTAINER-SECTION-ID\",\n   \"VER\": \"1\",\n   \"SECTION\": \"IDENTIFIERS\",\n   \"AUTHOR\": \"lionkimbro@gmail.com\",\n   \"AUTHORDATE\": \"2021-08-26\"}\n\n(by RFC-4151, this might be: \"tag:lionkimbro@gmail.com,2021-08-26:json-container-section-id:v1:identifiers\")\n\nThe SECTIONs, which are what vary, are:\n\n- IDENTIFIERS -- for storing raw identifiers in, with HARD and SOFT data, and local short names as well\n\nThe CONTENT of this section is a list.\nEach item of the list contains identifier data."
         },
         "format": "Fat_Info",
         "uid": "ebec69e7070111ecb4b660a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 13:31:39.661287",
            "Hook": "",
            "Name": "How bad would a collision be?",
            "Question": "How bad would a collision be?"
         },
         "format": "Fat_Question",
         "uid": "f4596f06038711ecaa4d60a44c24df47"
      },
      {
         "children": [
            "fb852403044511ecae9260a44c24df47",
            "de7793aa070111ec993960a44c24df47"
         ],
         "data": {
            "Name": "Sketching"
         },
         "format": "DEFAULT",
         "uid": "f5fbd857044511ecb5f560a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Author": "Lion",
            "Created": "2021-08-26 22:09:34.500091",
            "Hook": "they don't require special conventions for nesting structures like XUUIDs do",
            "Name": "Tag URIs are just strings"
         },
         "format": "Inquiry_Con",
         "uid": "f80c89d206f411ecab8a60a44c24df47"
      },
      {
         "children": [
            "a3b89bad09ee11eca5db60a44c24df47"
         ],
         "data": {
            "Created": "2021-08-30 16:57:02.034943",
            "Hook": "most existing data formats will require key files as auxiliaries",
            "Name": "Key Files are required",
            "Notes": "Because most systems just have string identifiers (say,) and can't handle full XUUIDs, there's a need for files that say, \"this string represents that XUUID,\" and that's going to be hard to explain to people, I think.\n\nFor example, my LSF files cannot say, \"author: &lt;complex identifier for Lion Kimbro&gt;\"; they can only say something like: \"author: person:lionkimbro\".\nWell, how does \"person:lionkimbro\" get resolved to an identity?  And that requires a key file.\n(Either that, or the LSF file needs to have a block that is itself the key file.)"
         },
         "format": "Fat_Info",
         "uid": "f85c6ff709ed11eca07960a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-26 20:43:44.413494",
            "Hook": "who is responsible for making this assignment?",
            "Name": "Authority",
            "Notes": "Taking a leaf from RFC-4151 tag URIs, uniqueness can be assured by an authority.\n\nTwo good ways to establish something that one has authority over are via the domain name system.\n\nSpecifically:\n\n1. use of an email address (ex: \"lionkimbro@gmail.com\"),\n2. use of a domain name (ex: \"taoriver.net\")\n\nSince email addresses and domain names are transferable, it is then critical to associate this information with a time at which the authority over the email address or domain name is clear.\n\nA way this might show up is:\n\n  {\"ASSIGNAUTHORITY\": \"lionkimbro@gmail.com\",\n   \"ASSIGNDATE\": \"2021-08-26\"}\n\nSo to annotate the example from before:\n\n  {\"TYPE\": [XUUID:] \"TYPE.PERSON\",\n   \"NAME\": \"Lion Kimbro\",\n   \"DOB\": \"1977-08-29\",\n   \"BIRTHPLACE\": \"Monterey, CA\",\n   \"ASSIGNAUTHORITY\": \"lionkimbro@gmail.com\",\n   \"ASSIGNDATE\": \"2021-08-26\",\n   \"RANDOM\": \"f0838b3c-dc7c-440d-b941-4b1d07d7eda4\"}\n\nNote that at this point, a \"RANDOM\" key is not so necessary, because nobody else will accidentally use the same ASSIGNEDBY and ASSIGNMENTDATE keys (unless this is a deliberate forgery, -- in which case, the random id will not help you either.)\n\nSo removing the \"RANDOM\" key, one would get:\n\n  {\"TYPE\": [XUUID:] \"TYPE.PERSON\",\n   \"NAME\": \"Lion Kimbro\",\n   \"DOB\": \"1977-08-29\",\n   \"BIRTHPLACE\": \"Monterey, CA\",\n   \"ASSIGNAUTHORITY\": \"lionkimbro@gmail.com\",\n   \"ASSIGNDATE\": \"2021-08-26\"}\n"
         },
         "format": "Fat_Info",
         "uid": "fa5bb02106e811ec8a8d60a44c24df47"
      },
      {
         "children": [
            "cbdadf40044f11ecabe960a44c24df47"
         ],
         "data": {
            "Created": "2021-08-23 12:11:58.247322",
            "Hook": "what needs to be included?",
            "Name": "Data Format Concepts",
            "Notes": "The following things need to be there, when publishing data:\n\n* a mapping from local short names (local to the data file, at a minimum) and the full hard data identifiers\n* the full hard data identifiers\n* the associated soft data\n* string values need to be separated from string references to other data\n  -- in JSON, this would look like [\"STR\", \"string value\"] vs. [\"REF\", \"reference value\"],\n     or possibly just \"string value\" vs. [\"REF\", \"reference value\"], specifically decoded\n     in the context of reading out identifiers information\n  -- in NLSD, the meta tag can identify XUUID identifiers (META: \"XUUID\")\n\nSo I am imagining for a JSON package, something like:\n\n* an outer encasement\n  -- with version information,\n  -- with optional attached data,\n  -- with an XUUIDs section\n\n{\"TYPE\": \"XUUID Packaged Data\",\n \"VERSION\": 1,\n \"DATA\": ...,\n \"XUUIDS\": [...]}\n\nAlternatively, creating a multi-part JSON container format:\n\n[{\"SECTION\": \"section name\",\n  ...,\n  \"CONTENT\": ...},\n {\"SECTION\": \"MAIN\",\n  ...,\n  \"CONTENT\": ...},\n ...]\n"
         },
         "format": "Fat_Info",
         "uid": "fb852403044511ecae9260a44c24df47"
      },
      {
         "children": [
            "aec415e405de11ecb95360a44c24df47"
         ],
         "data": {
            "Created": "2021-08-25 12:52:36.471028",
            "Description": "",
            "Hook": "sequence is just random",
            "Name": "not sequencable",
            "Notes": "You could make up for this by generating a bunch of GUIDs, and then sorting them, and then applying them to the things you are identifying so that they can be sequenced.\n\nBut what are the consequences?"
         },
         "format": "Inquiry_Con",
         "uid": "fef0399005dd11ec985060a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 13:53:26.313393",
            "Hook": "it's easy to create a new identifier",
            "Name": "Easily Assigned",
            "Notes": "Some systems that are hard to assign in:\n- domain names (highly political, highly competitive)\n- IP addresses (requires block registration, multiple layers of delegation of block space)\n\nSome systems that are easy to assign in:\n- UUID v4 (just choose random numbers)\n"
         },
         "format": "Fat_Info",
         "uid": "ff2cb8f3038a11ecbf7b60a44c24df47"
      },
      {
         "children": [],
         "data": {
            "Created": "2021-08-22 15:26:34.019870",
            "Hook": "Mathematically Unique Enough",
            "Name": "Unique",
            "Notes": "Even accounting for the birthday paradox, there are enough UUIDs here.\n\n[INSERT HERE: mathematics of the birthday paradox]\n[INSERT HERE: different conceptualizations of the space of allocation before a collision]\n"
         },
         "format": "Fat_Info",
         "uid": "ffd52fbe039711eca77560a44c24df47"
      }
   ],
   "properties": {
      "tlversion": "3.1.3",
      "topnodes": [
         "7906470a036b11ec929960a44c24df47"
      ]
   }
}